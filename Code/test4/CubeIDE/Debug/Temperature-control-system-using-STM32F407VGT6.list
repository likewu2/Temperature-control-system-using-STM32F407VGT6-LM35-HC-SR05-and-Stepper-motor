
Temperature-control-system-using-STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000310  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .after_vectors 000000bc  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f8  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005598  08005598  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080055a0  080055a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  080055a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 11 .bss          000001e0  20000070  20000070  00020070  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000250  20000250  00020070  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000f31f  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000029e8  00000000  00000000  0002f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fa0  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000e08  00000000  00000000  00032d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023eac  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00010157  00000000  00000000  00057a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d0dc0  00000000  00000000  00067b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003d38  00000000  00000000  00138954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000310 <_stack_init>:
 8000310:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop

08000318 <_mainCRTStartup>:
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <_mainCRTStartup+0x60>)
 800031a:	2b00      	cmp	r3, #0
 800031c:	bf08      	it	eq
 800031e:	4b13      	ldreq	r3, [pc, #76]	; (800036c <_mainCRTStartup+0x54>)
 8000320:	469d      	mov	sp, r3
 8000322:	f7ff fff5 	bl	8000310 <_stack_init>
 8000326:	2100      	movs	r1, #0
 8000328:	468b      	mov	fp, r1
 800032a:	460f      	mov	r7, r1
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <_mainCRTStartup+0x64>)
 800032e:	4a14      	ldr	r2, [pc, #80]	; (8000380 <_mainCRTStartup+0x68>)
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	f004 f8e0 	bl	80044f6 <memset>
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <_mainCRTStartup+0x58>)
 8000338:	2b00      	cmp	r3, #0
 800033a:	d000      	beq.n	800033e <_mainCRTStartup+0x26>
 800033c:	4798      	blx	r3
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <_mainCRTStartup+0x5c>)
 8000340:	2b00      	cmp	r3, #0
 8000342:	d000      	beq.n	8000346 <_mainCRTStartup+0x2e>
 8000344:	4798      	blx	r3
 8000346:	2000      	movs	r0, #0
 8000348:	2100      	movs	r1, #0
 800034a:	0004      	movs	r4, r0
 800034c:	000d      	movs	r5, r1
 800034e:	480d      	ldr	r0, [pc, #52]	; (8000384 <_mainCRTStartup+0x6c>)
 8000350:	2800      	cmp	r0, #0
 8000352:	d002      	beq.n	800035a <_mainCRTStartup+0x42>
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <_mainCRTStartup+0x70>)
 8000356:	f3af 8000 	nop.w
 800035a:	f004 f8a5 	bl	80044a8 <__libc_init_array>
 800035e:	0020      	movs	r0, r4
 8000360:	0029      	movs	r1, r5
 8000362:	f000 f9e9 	bl	8000738 <main>
 8000366:	f004 f81d 	bl	80043a4 <exit>
 800036a:	bf00      	nop
 800036c:	00080000 	.word	0x00080000
	...
 800037c:	20000070 	.word	0x20000070
 8000380:	20000250 	.word	0x20000250
	...

0800038c <__aeabi_uldivmod>:
 800038c:	b953      	cbnz	r3, 80003a4 <__aeabi_uldivmod+0x18>
 800038e:	b94a      	cbnz	r2, 80003a4 <__aeabi_uldivmod+0x18>
 8000390:	2900      	cmp	r1, #0
 8000392:	bf08      	it	eq
 8000394:	2800      	cmpeq	r0, #0
 8000396:	bf1c      	itt	ne
 8000398:	f04f 31ff 	movne.w	r1, #4294967295
 800039c:	f04f 30ff 	movne.w	r0, #4294967295
 80003a0:	f000 b80c 	b.w	80003bc <__aeabi_idiv0>
 80003a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ac:	f004 fe26 	bl	8004ffc <__udivmoddi4>
 80003b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b8:	b004      	add	sp, #16
 80003ba:	4770      	bx	lr

080003bc <__aeabi_idiv0>:
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__do_global_dtors_aux>:
 80003c0:	b510      	push	{r4, lr}
 80003c2:	4c05      	ldr	r4, [pc, #20]	; (80003d8 <__do_global_dtors_aux+0x18>)
 80003c4:	7823      	ldrb	r3, [r4, #0]
 80003c6:	b933      	cbnz	r3, 80003d6 <__do_global_dtors_aux+0x16>
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <__do_global_dtors_aux+0x1c>)
 80003ca:	b113      	cbz	r3, 80003d2 <__do_global_dtors_aux+0x12>
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <__do_global_dtors_aux+0x20>)
 80003ce:	f3af 8000 	nop.w
 80003d2:	2301      	movs	r3, #1
 80003d4:	7023      	strb	r3, [r4, #0]
 80003d6:	bd10      	pop	{r4, pc}
 80003d8:	20000070 	.word	0x20000070
 80003dc:	00000000 	.word	0x00000000
 80003e0:	080052cc 	.word	0x080052cc

080003e4 <frame_dummy>:
 80003e4:	b508      	push	{r3, lr}
 80003e6:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <frame_dummy+0x10>)
 80003e8:	b11b      	cbz	r3, 80003f2 <frame_dummy+0xe>
 80003ea:	4903      	ldr	r1, [pc, #12]	; (80003f8 <frame_dummy+0x14>)
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <frame_dummy+0x18>)
 80003ee:	f3af 8000 	nop.w
 80003f2:	bd08      	pop	{r3, pc}
 80003f4:	00000000 	.word	0x00000000
 80003f8:	20000074 	.word	0x20000074
 80003fc:	080052cc 	.word	0x080052cc

08000400 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	463b      	mov	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <MX_ADC1_Init+0x9c>)
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <MX_ADC1_Init+0xa0>)
 8000416:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <MX_ADC1_Init+0x9c>)
 800041a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800041e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_ADC1_Init+0x9c>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000426:	4b1d      	ldr	r3, [pc, #116]	; (800049c <MX_ADC1_Init+0x9c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_ADC1_Init+0x9c>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <MX_ADC1_Init+0x9c>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_ADC1_Init+0x9c>)
 800043c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_ADC1_Init+0x9c>)
 8000444:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_ADC1_Init+0x9c>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_ADC1_Init+0x9c>)
 8000452:	2201      	movs	r2, #1
 8000454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_ADC1_Init+0x9c>)
 8000458:	2200      	movs	r2, #0
 800045a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_ADC1_Init+0x9c>)
 8000460:	2201      	movs	r2, #1
 8000462:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <MX_ADC1_Init+0x9c>)
 8000466:	f000 fe9b 	bl	80011a0 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000470:	f000 fa38 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000474:	2304      	movs	r3, #4
 8000476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000480:	463b      	mov	r3, r7
 8000482:	4619      	mov	r1, r3
 8000484:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_ADC1_Init+0x9c>)
 8000486:	f001 f82b 	bl	80014e0 <HAL_ADC_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000490:	f000 fa28 	bl	80008e4 <Error_Handler>
  }

}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000008c 	.word	0x2000008c
 80004a0:	40012000 	.word	0x40012000

080004a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <HAL_ADC_MspInit+0x8c>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d12f      	bne.n	8000526 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ce:	4a19      	ldr	r2, [pc, #100]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d4:	6453      	str	r3, [r2, #68]	; 0x44
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <HAL_ADC_MspInit+0x90>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004fe:	2310      	movs	r3, #16
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000502:	2303      	movs	r3, #3
 8000504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <HAL_ADC_MspInit+0x94>)
 8000512:	f001 fe01 	bl	8002118 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	2012      	movs	r0, #18
 800051c:	f001 fadf 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000520:	2012      	movs	r0, #18
 8000522:	f001 faf8 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	; 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40012000 	.word	0x40012000
 8000534:	40023800 	.word	0x40023800
 8000538:	40020000 	.word	0x40020000

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_DMA_Init+0x3c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <MX_DMA_Init+0x3c>)
 800054c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_DMA_Init+0x3c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	200d      	movs	r0, #13
 8000564:	f001 fabb 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000568:	200d      	movs	r0, #13
 800056a:	f001 fad4 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	4b47      	ldr	r3, [pc, #284]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a46      	ldr	r2, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x138>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a38      	ldr	r2, [pc, #224]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <MX_GPIO_Init+0x138>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <MX_GPIO_Init+0x138>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_GPIO_Init+0x138>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2104      	movs	r1, #4
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_GPIO_Init+0x13c>)
 8000640:	f001 ff04 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Blue_Pin|Yellow_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2111      	movs	r1, #17
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <MX_GPIO_Init+0x140>)
 800064a:	f001 feff 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Orange_Pin|Pink_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2188      	movs	r1, #136	; 0x88
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <MX_GPIO_Init+0x144>)
 8000654:	f001 fefa 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000658:	2304      	movs	r3, #4
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x13c>)
 8000670:	f001 fd52 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Blue_Pin|Yellow_Pin;
 8000674:	2311      	movs	r3, #17
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_GPIO_Init+0x140>)
 800068c:	f001 fd44 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Orange_Pin|Pink_Pin;
 8000690:	2388      	movs	r3, #136	; 0x88
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_GPIO_Init+0x144>)
 80006a8:	f001 fd36 	bl	8002118 <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020400 	.word	0x40020400

080006c4 <blink_led_init>:

// ----------------------------------------------------------------------------

void
blink_led_init()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  // Enable GPIO Peripheral clock
  SET_BIT(RCC->AHB1ENR, BLINK_RCC_MASKx(BLINK_PORT_NUMBER));
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <blink_led_init+0x3c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <blink_led_init+0x3c>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30

  GPIO_InitTypeDef GPIO_InitStructure;

  // Configure pin in output push/pull mode
  GPIO_InitStructure.Pin = BLINK_PIN_MASK(BLINK_PIN_NUMBER);
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_GPIOx(BLINK_PORT_NUMBER), &GPIO_InitStructure);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <blink_led_init+0x40>)
 80006ee:	f001 fd13 	bl	8002118 <HAL_GPIO_Init>

  // Start with led turned off
  blink_led_off();
 80006f2:	f000 f815 	bl	8000720 <blink_led_off>
}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40020c00 	.word	0x40020c00

08000708 <blink_led_on>:

void
blink_led_on(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
#if (BLINK_ACTIVE_LOW)
  HAL_GPIO_WritePin(BLINK_GPIOx(BLINK_PORT_NUMBER),
    BLINK_PIN_MASK(BLINK_PIN_NUMBER), GPIO_PIN_RESET);
#else
  HAL_GPIO_WritePin(BLINK_GPIOx(BLINK_PORT_NUMBER),
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <blink_led_on+0x14>)
 8000714:	f001 fe9a 	bl	800244c <HAL_GPIO_WritePin>
    BLINK_PIN_MASK(BLINK_PIN_NUMBER), GPIO_PIN_SET);
#endif
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020c00 	.word	0x40020c00

08000720 <blink_led_off>:

void
blink_led_off(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
#if (BLINK_ACTIVE_LOW)
  HAL_GPIO_WritePin(BLINK_GPIOx(BLINK_PORT_NUMBER),
    BLINK_PIN_MASK(BLINK_PIN_NUMBER), GPIO_PIN_SET);
#else
  HAL_GPIO_WritePin(BLINK_GPIOx(BLINK_PORT_NUMBER),
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <blink_led_off+0x14>)
 800072c:	f001 fe8e 	bl	800244c <HAL_GPIO_WritePin>
    BLINK_PIN_MASK(BLINK_PIN_NUMBER), GPIO_PIN_RESET);
#endif
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(int argc, char* argv[])
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	60fb      	str	r3, [r7, #12]
inline void
__attribute__((always_inline))
trace_dump_args(int argc __attribute__((unused)),
    char* argv[] __attribute__((unused)))
{
}
 800074a:	bf00      	nop
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <main+0xc0>)
 800074e:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN 1 */
  trace_dump_args(argc, argv);

  trace_puts("Hello Arm World!");

  puts("Standard output message.");
 8000750:	482a      	ldr	r0, [pc, #168]	; (80007fc <main+0xc4>)
 8000752:	f003 ff47 	bl	80045e4 <puts>

  fprintf(stderr, "Standard error message.\n");
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <main+0xc8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	2218      	movs	r2, #24
 800075e:	2101      	movs	r1, #1
 8000760:	4828      	ldr	r0, [pc, #160]	; (8000804 <main+0xcc>)
 8000762:	f003 fe93 	bl	800448c <fwrite>
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <main+0xd0>)
 8000768:	61bb      	str	r3, [r7, #24]

  trace_printf("System clock: %u Hz\n", SystemCoreClock);

  timer_start();
 800076a:	f000 fbbd 	bl	8000ee8 <timer_start>

  blink_led_init();
 800076e:	f7ff ffa9 	bl	80006c4 <blink_led_init>

  uint32_t seconds = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24

#define LOOP_COUNT (10)

  int loops = LOOP_COUNT;
 8000776:	230a      	movs	r3, #10
 8000778:	623b      	str	r3, [r7, #32]
  if (argc > 1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b01      	cmp	r3, #1
 800077e:	dd06      	ble.n	800078e <main+0x56>
    {
      // If defined, get the number of loops from the command line,
      // configurable via semihosting.
      loops = atoi (argv[1]);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3304      	adds	r3, #4
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fe02 	bl	8004390 <atoi>
 800078c:	6238      	str	r0, [r7, #32]
    }

  // Short loop.
  for (int i = 0; i < loops; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e01a      	b.n	80007ca <main+0x92>
    {
      blink_led_on();
 8000794:	f7ff ffb8 	bl	8000708 <blink_led_on>
      timer_sleep(i == 0 ? TIMER_FREQUENCY_HZ : BLINK_ON_TICKS);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <main+0x6c>
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	e001      	b.n	80007a8 <main+0x70>
 80007a4:	f240 23ee 	movw	r3, #750	; 0x2ee
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fbaf 	bl	8000f0c <timer_sleep>

      blink_led_off();
 80007ae:	f7ff ffb7 	bl	8000720 <blink_led_off>
      timer_sleep(BLINK_OFF_TICKS);
 80007b2:	20fa      	movs	r0, #250	; 0xfa
 80007b4:	f000 fbaa 	bl	8000f0c <timer_sleep>

      ++seconds;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	3301      	adds	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <main+0xd4>)
 80007c0:	60bb      	str	r3, [r7, #8]
    return 0;
 80007c2:	bf00      	nop
  for (int i = 0; i < loops; i++)
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3301      	adds	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbe0      	blt.n	8000794 <main+0x5c>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fc77 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f81b 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f7ff fecf 	bl	800057c <MX_GPIO_Init>
  MX_DMA_Init();
 80007de:	f7ff fead 	bl	800053c <MX_DMA_Init>
  MX_ADC1_Init();
 80007e2:	f7ff fe0d 	bl	8000400 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007e6:	f000 f9b7 	bl	8000b58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ea:	f000 fa03 	bl	8000bf4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80007ee:	f000 fa4f 	bl	8000c90 <MX_TIM5_Init>
  MX_UART4_Init();
 80007f2:	f000 fb9f 	bl	8000f34 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <main+0xbe>
 80007f8:	080053a0 	.word	0x080053a0
 80007fc:	080053b4 	.word	0x080053b4
 8000800:	2000000c 	.word	0x2000000c
 8000804:	080053d0 	.word	0x080053d0
 8000808:	080053ec 	.word	0x080053ec
 800080c:	08005404 	.word	0x08005404

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fe69 	bl	80044f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <SystemClock_Config+0xd0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2310      	movs	r3, #16
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fdf1 	bl	800247c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f820 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2105      	movs	r1, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f848 	bl	8002958 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ce:	f000 f809 	bl	80008e4 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092e:	2007      	movs	r0, #7
 8000930:	f001 f8ca 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <HardFault_Handler+0x4>

08000952 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <BusFault_Handler+0x4>

0800095e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 fbec 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <DMA1_Stream2_IRQHandler+0x10>)
 800099a:	f001 f985 	bl	8001ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200001dc 	.word	0x200001dc

080009a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <ADC_IRQHandler+0x10>)
 80009ae:	f000 fc3a 	bl	8001226 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000008c 	.word	0x2000008c

080009bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM3_IRQHandler+0x10>)
 80009c2:	f002 fa43 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000118 	.word	0x20000118

080009d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <TIM5_IRQHandler+0x10>)
 80009d6:	f002 fa39 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000158 	.word	0x20000158

080009e4 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ee:	f003 fcd3 	bl	8004398 <__errno>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2216      	movs	r2, #22
 80009f6:	601a      	str	r2, [r3, #0]
	return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_exit>:

void _exit (int status)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffe7 	bl	80009e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a16:	e7fe      	b.n	8000a16 <_exit+0x12>

08000a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
	}

return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
	}
	return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_isatty>:

int _isatty(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
	return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f003 fc3c 	bl	8004398 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	20000250 	.word	0x20000250

08000b58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1343;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b7e:	f240 523f 	movw	r2, #1343	; 0x53f
 8000b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b8c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000ba0:	f002 f8fe 	bl	8002da0 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000baa:	f7ff fe9b 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000bbc:	f002 faea 	bl	8003194 <HAL_TIM_ConfigClockSource>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bc6:	f7ff fe8d 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM2_Init+0x98>)
 8000bd8:	f002 fe28 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000be2:	f7ff fe7f 	bl	80008e4 <Error_Handler>
  }

}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000d8 	.word	0x200000d8

08000bf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <MX_TIM3_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 923;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c24:	f240 329b 	movw	r2, #923	; 0x39b
 8000c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c38:	f002 f8b2 	bl	8002da0 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c42:	f7ff fe4f 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c54:	f002 fa9e 	bl	8003194 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f7ff fe41 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_TIM3_Init+0x94>)
 8000c70:	f002 fddc 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c7a:	f7ff fe33 	bl	80008e4 <Error_Handler>
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000118 	.word	0x20000118
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_TIM5_Init+0xa4>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cb4:	2253      	movs	r2, #83	; 0x53
 8000cb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cd4:	f002 f88f 	bl	8002df6 <HAL_TIM_IC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000cde:	f7ff fe01 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000cf2:	f002 fd9b 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f7ff fdf2 	bl	80008e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM5_Init+0xa0>)
 8000d18:	f002 f9a0 	bl	800305c <HAL_TIM_IC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8000d22:	f7ff fddf 	bl	80008e4 <Error_Handler>
  }

}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000158 	.word	0x20000158
 8000d34:	40000c00 	.word	0x40000c00

08000d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d10e      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d66:	e01a      	b.n	8000d9e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_TIM_Base_MspInit+0x74>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d115      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	201d      	movs	r0, #29
 8000d94:	f000 fea3 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d98:	201d      	movs	r0, #29
 8000d9a:	f000 febc 	bl	8001b16 <HAL_NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40000400 	.word	0x40000400

08000db0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_TIM_IC_MspInit+0x94>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d133      	bne.n	8000e3a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_TIM_IC_MspInit+0x98>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_TIM_IC_MspInit+0x9c>)
 8000e26:	f001 f977 	bl	8002118 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2032      	movs	r0, #50	; 0x32
 8000e30:	f000 fe55 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e34:	2032      	movs	r0, #50	; 0x32
 8000e36:	f000 fe6e 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40000c00 	.word	0x40000c00
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ffc2 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <timer_start>:

// ----------------------------------------------------------------------------

void
timer_start (void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  // Use SysTick as reference for the delay loops.
  SysTick_Config (SystemCoreClock / TIMER_FREQUENCY_HZ);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <timer_start+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <timer_start+0x20>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	099b      	lsrs	r3, r3, #6
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ffd3 	bl	8000ea4 <SysTick_Config>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	10624dd3 	.word	0x10624dd3

08000f0c <timer_sleep>:

void
timer_sleep (timer_ticks_t ticks)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  timer_delayCount = ticks;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <timer_sleep+0x24>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]

  // Busy wait until the SysTick decrements the counter to zero.
  while (timer_delayCount != 0u)
 8000f1a:	bf00      	nop
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <timer_sleep+0x24>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1fb      	bne.n	8000f1c <timer_sleep+0x10>
    ;
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000198 	.word	0x20000198

08000f34 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_UART4_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_UART4_Init+0x4c>)
 8000f6c:	f002 fcea 	bl	8003944 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f76:	f7ff fcb5 	bl	80008e4 <Error_Handler>
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000019c 	.word	0x2000019c
 8000f84:	40004c00 	.word	0x40004c00

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_UART_MspInit+0x120>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d179      	bne.n	800109e <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a30      	ldr	r2, [pc, #192]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_UART_MspInit+0x124>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800100e:	2308      	movs	r3, #8
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4825      	ldr	r0, [pc, #148]	; (80010b0 <HAL_UART_MspInit+0x128>)
 800101a:	f001 f87d 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001030:	2308      	movs	r3, #8
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <HAL_UART_MspInit+0x12c>)
 800103c:	f001 f86c 	bl	8002118 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_UART_MspInit+0x134>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001048:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_UART_MspInit+0x130>)
 800105c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001060:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0x130>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001074:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_UART_MspInit+0x130>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001084:	f000 fd62 	bl	8001b4c <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800108e:	f7ff fc29 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_UART_MspInit+0x130>)
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_UART_MspInit+0x130>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004c00 	.word	0x40004c00
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020800 	.word	0x40020800
 80010b8:	200001dc 	.word	0x200001dc
 80010bc:	40026040 	.word	0x40026040

080010c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <CAN1_RX0_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fceb 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fbfa 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd03 	bl	8001b32 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fccb 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000008 	.word	0x20000008
 8001188:	2000023c 	.word	0x2000023c

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	2000023c 	.word	0x2000023c

080011a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e033      	b.n	800121e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff f970 	bl	80004a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e6:	f023 0302 	bic.w	r3, r3, #2
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fa96 	bl	8001724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
 800120e:	e001      	b.n	8001214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b20      	cmp	r3, #32
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d049      	beq.n	80012fc <HAL_ADC_IRQHandler+0xd6>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d046      	beq.n	80012fc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d12b      	bne.n	80012ec <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001298:	2b00      	cmp	r3, #0
 800129a:	d127      	bne.n	80012ec <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d119      	bne.n	80012ec <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0220 	bic.w	r2, r2, #32
 80012c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8db 	bl	80014a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f06f 0212 	mvn.w	r2, #18
 80012fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	2b80      	cmp	r3, #128	; 0x80
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d057      	beq.n	80013de <HAL_ADC_IRQHandler+0x1b8>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d054      	beq.n	80013de <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d139      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001372:	2b00      	cmp	r3, #0
 8001374:	d12b      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001380:	2b00      	cmp	r3, #0
 8001382:	d124      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11d      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d119      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 faa4 	bl	800191c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f06f 020c 	mvn.w	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fe:	2b40      	cmp	r3, #64	; 0x40
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d017      	beq.n	8001440 <HAL_ADC_IRQHandler+0x21a>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d014      	beq.n	8001440 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10d      	bne.n	8001440 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f842 	bl	80014ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f06f 0201 	mvn.w	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b20      	cmp	r3, #32
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d015      	beq.n	80014a0 <HAL_ADC_IRQHandler+0x27a>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d012      	beq.n	80014a0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f043 0202 	orr.w	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f06f 0220 	mvn.w	r2, #32
 800148e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f81b 	bl	80014cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f06f 0220 	mvn.w	r2, #32
 800149e:	601a      	str	r2, [r3, #0]
  }
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1c>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e105      	b.n	8001708 <HAL_ADC_ConfigChannel+0x228>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d925      	bls.n	8001558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68d9      	ldr	r1, [r3, #12]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	3b1e      	subs	r3, #30
 8001522:	2207      	movs	r2, #7
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68d9      	ldr	r1, [r3, #12]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	4603      	mov	r3, r0
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4403      	add	r3, r0
 800154a:	3b1e      	subs	r3, #30
 800154c:	409a      	lsls	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	e022      	b.n	800159e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6919      	ldr	r1, [r3, #16]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	2207      	movs	r2, #7
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	4603      	mov	r3, r0
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4403      	add	r3, r0
 8001594:	409a      	lsls	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d824      	bhi.n	80015f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3b05      	subs	r3, #5
 80015b8:	221f      	movs	r2, #31
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b05      	subs	r3, #5
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
 80015ee:	e04c      	b.n	800168a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d824      	bhi.n	8001642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b23      	subs	r3, #35	; 0x23
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43da      	mvns	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	400a      	ands	r2, r1
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b23      	subs	r3, #35	; 0x23
 8001634:	fa00 f203 	lsl.w	r2, r0, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
 8001640:	e023      	b.n	800168a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3b41      	subs	r3, #65	; 0x41
 8001654:	221f      	movs	r2, #31
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	3b41      	subs	r3, #65	; 0x41
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_ADC_ConfigChannel+0x234>)
 800168c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_ADC_ConfigChannel+0x238>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d109      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x1cc>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b12      	cmp	r3, #18
 800169e:	d105      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_ADC_ConfigChannel+0x238>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d123      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x21e>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d003      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x1e6>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b11      	cmp	r3, #17
 80016c4:	d11b      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d111      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_ADC_ConfigChannel+0x23c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_ADC_ConfigChannel+0x240>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9a      	lsrs	r2, r3, #18
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f9      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40012300 	.word	0x40012300
 8001718:	40012000 	.word	0x40012000
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172c:	4b79      	ldr	r3, [pc, #484]	; (8001914 <ADC_Init+0x1f0>)
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	4a58      	ldr	r2, [pc, #352]	; (8001918 <ADC_Init+0x1f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e00f      	b.n	8001822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0202 	bic.w	r2, r2, #2
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800186e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	035a      	lsls	r2, r3, #13
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e007      	b.n	8001898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	051a      	lsls	r2, r3, #20
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018da:	025a      	lsls	r2, r3, #9
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	029a      	lsls	r2, r3, #10
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40012300 	.word	0x40012300
 8001918:	0f000001 	.word	0x0f000001

0800191c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
	...

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <__NVIC_EnableIRQ+0x34>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff90 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff2d 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff42 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff90 	bl	8001a20 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5f 	bl	80019cc <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff35 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff fb18 	bl	800118c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e099      	b.n	8001c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	e00f      	b.n	8001baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8a:	f7ff faff 	bl	800118c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d908      	bls.n	8001baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e078      	b.n	8001c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e8      	bne.n	8001b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_DMA_Init+0x158>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d117      	bne.n	8001c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9e7 	bl	8002024 <DMA_CheckFifoParam>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9a0 	bl	8001fbc <DMA_CalcBaseAndBitshift>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	223f      	movs	r2, #63	; 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f010803f 	.word	0xf010803f

08001ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb4:	4b8e      	ldr	r3, [pc, #568]	; (8001ef0 <HAL_DMA_IRQHandler+0x248>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a8e      	ldr	r2, [pc, #568]	; (8001ef4 <HAL_DMA_IRQHandler+0x24c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01a      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2208      	movs	r2, #8
 8001d02:	409a      	lsls	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2201      	movs	r2, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	2201      	movs	r2, #1
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	2204      	movs	r2, #4
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2210      	movs	r2, #16
 8001d86:	409a      	lsls	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d043      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03c      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2210      	movs	r2, #16
 8001da4:	409a      	lsls	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d018      	beq.n	8001dea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d024      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
 8001dd6:	e01f      	b.n	8001e18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0208 	bic.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 808f 	beq.w	8001f48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8087 	beq.w	8001f48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2220      	movs	r2, #32
 8001e40:	409a      	lsls	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d136      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0216 	bic.w	r2, r2, #22
 8001e60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <HAL_DMA_IRQHandler+0x1da>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0208 	bic.w	r2, r2, #8
 8001e90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	223f      	movs	r2, #63	; 0x3f
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d07e      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
        }
        return;
 8001ebe:	e079      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01d      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d031      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e02c      	b.n	8001f48 <HAL_DMA_IRQHandler+0x2a0>
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e01e      	b.n	8001f48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10f      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d032      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d022      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2205      	movs	r2, #5
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d307      	bcc.n	8001f90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f2      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x2cc>
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f90:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
 8001fb2:	e000      	b.n	8001fb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb4:	bf00      	nop
    }
  }
}
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3b10      	subs	r3, #16
 8001fcc:	4a13      	ldr	r2, [pc, #76]	; (800201c <DMA_CalcBaseAndBitshift+0x60>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <DMA_CalcBaseAndBitshift+0x64>)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d909      	bls.n	8001ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	1d1a      	adds	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8001ffc:	e007      	b.n	800200e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	aaaaaaab 	.word	0xaaaaaaab
 8002020:	08005428 	.word	0x08005428

08002024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11f      	bne.n	800207e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d856      	bhi.n	80020f2 <DMA_CheckFifoParam+0xce>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <DMA_CheckFifoParam+0x28>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	0800206f 	.word	0x0800206f
 8002054:	0800205d 	.word	0x0800205d
 8002058:	080020f3 	.word	0x080020f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d046      	beq.n	80020f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206c:	e043      	b.n	80020f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002076:	d140      	bne.n	80020fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e03d      	b.n	80020fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002086:	d121      	bne.n	80020cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d837      	bhi.n	80020fe <DMA_CheckFifoParam+0xda>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x70>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020ab 	.word	0x080020ab
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	080020bd 	.word	0x080020bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      break;
 80020a8:	e030      	b.n	800210c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d025      	beq.n	8002102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ba:	e022      	b.n	8002102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c4:	d11f      	bne.n	8002106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ca:	e01c      	b.n	8002106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d903      	bls.n	80020da <DMA_CheckFifoParam+0xb6>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d003      	beq.n	80020e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d8:	e018      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      break;
 80020de:	e015      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e00b      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020f2:	bf00      	nop
 80020f4:	e00a      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e008      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e006      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fe:	bf00      	nop
 8002100:	e004      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
 8002104:	e002      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;   
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
    }
  } 
  
  return status; 
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e16b      	b.n	800240c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 815a 	bne.w	8002406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00b      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002166:	2b11      	cmp	r3, #17
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b12      	cmp	r3, #18
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0xfc>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80b4 	beq.w	8002406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_GPIO_Init+0x308>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <HAL_GPIO_Init+0x308>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_GPIO_Init+0x308>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a5a      	ldr	r2, [pc, #360]	; (8002424 <HAL_GPIO_Init+0x30c>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_GPIO_Init+0x310>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_GPIO_Init+0x314>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x318>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x31c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x320>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x324>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x328>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x32c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x20a>
 800231e:	2307      	movs	r3, #7
 8002320:	e00e      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002322:	2308      	movs	r3, #8
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002326:	2306      	movs	r3, #6
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4934      	ldr	r1, [pc, #208]	; (8002424 <HAL_GPIO_Init+0x30c>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_GPIO_Init+0x330>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002382:	4a31      	ldr	r2, [pc, #196]	; (8002448 <HAL_GPIO_Init+0x330>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x330>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <HAL_GPIO_Init+0x330>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_GPIO_Init+0x330>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_GPIO_Init+0x330>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_GPIO_Init+0x330>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_GPIO_Init+0x330>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f ae90 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40013c00 	.word	0x40013c00

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e25e      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b85      	ldr	r3, [pc, #532]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d112      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b82      	ldr	r3, [pc, #520]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b7e      	ldr	r3, [pc, #504]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e239      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a75      	ldr	r2, [pc, #468]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b70      	ldr	r3, [pc, #448]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6f      	ldr	r2, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6c      	ldr	r2, [pc, #432]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 8002514:	4b69      	ldr	r3, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a68      	ldr	r2, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b66      	ldr	r3, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a65      	ldr	r2, [pc, #404]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fe2a 	bl	800118c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fe26 	bl	800118c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1fe      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xc0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fe16 	bl	800118c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fe12 	bl	800118c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1ea      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d11c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1be      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4937      	ldr	r1, [pc, #220]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	e03a      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_OscConfig+0x244>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fdcb 	bl	800118c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fdc7 	bl	800118c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e19f      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4925      	ldr	r1, [pc, #148]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_OscConfig+0x244>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fdaa 	bl	800118c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fda6 	bl	800118c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e17e      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d036      	beq.n	80026d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_RCC_OscConfig+0x248>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fd8a 	bl	800118c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fd86 	bl	800118c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e15e      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x240>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
 800269a:	e01b      	b.n	80026d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_OscConfig+0x248>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fd73 	bl	800118c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	e00e      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026aa:	f7fe fd6f 	bl	800118c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d907      	bls.n	80026c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e147      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
 80026bc:	40023800 	.word	0x40023800
 80026c0:	42470000 	.word	0x42470000
 80026c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ea      	bne.n	80026aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8097 	beq.w	8002810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e6:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b7d      	ldr	r3, [pc, #500]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a7c      	ldr	r2, [pc, #496]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x474>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_RCC_OscConfig+0x474>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a73      	ldr	r2, [pc, #460]	; (80028f0 <HAL_RCC_OscConfig+0x474>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fd2f 	bl	800118c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fd2b 	bl	800118c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e103      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_OscConfig+0x474>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x2ea>
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a63      	ldr	r2, [pc, #396]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
 8002764:	e01c      	b.n	80027a0 <HAL_RCC_OscConfig+0x324>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x30c>
 800276e:	4b5f      	ldr	r3, [pc, #380]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a5e      	ldr	r2, [pc, #376]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	4b5c      	ldr	r3, [pc, #368]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0x324>
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a54      	ldr	r2, [pc, #336]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d015      	beq.n	80027d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fcf0 	bl	800118c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fcec 	bl	800118c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0c2      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ee      	beq.n	80027b0 <HAL_RCC_OscConfig+0x334>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe fcda 	bl	800118c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fcd6 	bl	800118c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0ac      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1ee      	bne.n	80027dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800280a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8098 	beq.w	800294a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d05c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d141      	bne.n	80028b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fcaa 	bl	800118c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fca6 	bl	800118c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e07e      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	019b      	lsls	r3, r3, #6
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	491b      	ldr	r1, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x478>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe fc7f 	bl	800118c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fc7b 	bl	800118c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e053      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x416>
 80028b0:	e04b      	b.n	800294a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_RCC_OscConfig+0x478>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fc68 	bl	800118c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fc64 	bl	800118c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e03c      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_RCC_OscConfig+0x470>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
 80028de:	e034      	b.n	800294a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e02f      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000
 80028f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	d11c      	bne.n	8002946 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d115      	bne.n	8002946 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002926:	4293      	cmp	r3, r2
 8002928:	d10d      	bne.n	8002946 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fba0 	bl	800118c <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fb9c 	bl	800118c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fb02 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08005410 	.word	0x08005410
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b094      	sub	sp, #80	; 0x50
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80e7 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1f8>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0e1      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x210>)
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b5c:	e0e1      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x214>)
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b62:	e0de      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d065      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
 8002b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4621      	mov	r1, r4
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	6139      	str	r1, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	46d4      	mov	ip, sl
 8002bd8:	ebb2 080c 	subs.w	r8, r2, ip
 8002bdc:	4659      	mov	r1, fp
 8002bde:	eb63 0901 	sbc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	462b      	mov	r3, r5
 8002c04:	eb49 0303 	adc.w	r3, r9, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c16:	4629      	mov	r1, r5
 8002c18:	024b      	lsls	r3, r1, #9
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4604      	mov	r4, r0
 8002c20:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002c24:	4601      	mov	r1, r0
 8002c26:	024a      	lsls	r2, r1, #9
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c38:	f7fd fba8 	bl	800038c <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c44:	e05c      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4611      	mov	r1, r2
 8002c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c60:	4642      	mov	r2, r8
 8002c62:	464b      	mov	r3, r9
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	0159      	lsls	r1, r3, #5
 8002c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c72:	0150      	lsls	r0, r2, #5
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	46c4      	mov	ip, r8
 8002c7a:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002c7e:	4640      	mov	r0, r8
 8002c80:	4649      	mov	r1, r9
 8002c82:	468c      	mov	ip, r1
 8002c84:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	00eb      	lsls	r3, r5, #3
 8002cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb2:	00e2      	lsls	r2, r4, #3
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	18e3      	adds	r3, r4, r3
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	eb45 0303 	adc.w	r3, r5, r3
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	028b      	lsls	r3, r1, #10
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4604      	mov	r4, r0
 8002cdc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ce0:	4601      	mov	r1, r0
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd fb4a 	bl	800038c <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x210>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08005420 	.word	0x08005420

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08005420 	.word	0x08005420

08002da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e01d      	b.n	8002dee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd ffb6 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f000 faca 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01d      	b.n	8002e44 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fd ffc7 	bl	8000db0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f000 fa9f 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0202 	mvn.w	r2, #2
 8002e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa56 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa49 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa58 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0204 	mvn.w	r2, #4
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa2c 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa1f 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa2e 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0208 	mvn.w	r2, #8
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa02 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9f5 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa04 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0210 	mvn.w	r2, #16
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9d8 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9cb 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f9da 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9a6 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fc9b 	bl	8003932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f99e 	bl	8003364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0220 	mvn.w	r2, #32
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fc66 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003072:	2302      	movs	r3, #2
 8003074:	e08a      	b.n	800318c <HAL_TIM_IC_ConfigChannel+0x130>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f000 fa0a 	bl	80034b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 020c 	bic.w	r2, r2, #12
 80030ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6999      	ldr	r1, [r3, #24]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	619a      	str	r2, [r3, #24]
 80030c2:	e05a      	b.n	800317a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d11c      	bne.n	8003104 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f000 fa8b 	bl	80035f4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
 8003102:	e03a      	b.n	800317a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11b      	bne.n	8003142 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f000 fad6 	bl	80036ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 020c 	bic.w	r2, r2, #12
 800312c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69d9      	ldr	r1, [r3, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
 8003140:	e01b      	b.n	800317a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f000 faf5 	bl	8003740 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003164:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69d9      	ldr	r1, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x18>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0b3      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x180>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e4:	d03e      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0xd0>
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ea:	f200 8087 	bhi.w	80032fc <HAL_TIM_ConfigClockSource+0x168>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	f000 8085 	beq.w	8003300 <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d87f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 80031fc:	2b70      	cmp	r3, #112	; 0x70
 80031fe:	d01a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xa2>
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d87b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 8003204:	2b60      	cmp	r3, #96	; 0x60
 8003206:	d050      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x116>
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d877      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 800320c:	2b50      	cmp	r3, #80	; 0x50
 800320e:	d03c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xf6>
 8003210:	2b50      	cmp	r3, #80	; 0x50
 8003212:	d873      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d058      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x136>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d86f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 800321c:	2b30      	cmp	r3, #48	; 0x30
 800321e:	d064      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x156>
 8003220:	2b30      	cmp	r3, #48	; 0x30
 8003222:	d86b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d060      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x156>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d867      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x156>
 8003230:	2b10      	cmp	r3, #16
 8003232:	d05a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003234:	e062      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f000 fad1 	bl	80037ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003258:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	609a      	str	r2, [r3, #8]
      break;
 8003262:	e04e      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f000 faba 	bl	80037ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003286:	609a      	str	r2, [r3, #8]
      break;
 8003288:	e03b      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	461a      	mov	r2, r3
 8003298:	f000 f97e 	bl	8003598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2150      	movs	r1, #80	; 0x50
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fa88 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e02b      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 f9d8 	bl	800366c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2160      	movs	r1, #96	; 0x60
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fa78 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 80032c8:	e01b      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 f95e 	bl	8003598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa68 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 80032e8:	e00b      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f000 fa5f 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 80032fa:	e002      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
	...

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3f      	ldr	r2, [pc, #252]	; (8003488 <TIM_Base_SetConfig+0x110>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d00f      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3c      	ldr	r2, [pc, #240]	; (800348c <TIM_Base_SetConfig+0x114>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <TIM_Base_SetConfig+0x118>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a39      	ldr	r2, [pc, #228]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d108      	bne.n	80033ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <TIM_Base_SetConfig+0x110>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d027      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_Base_SetConfig+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d023      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <TIM_Base_SetConfig+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d017      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <TIM_Base_SetConfig+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <TIM_Base_SetConfig+0x128>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <TIM_Base_SetConfig+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <TIM_Base_SetConfig+0x130>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <TIM_Base_SetConfig+0x134>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <TIM_Base_SetConfig+0x138>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <TIM_Base_SetConfig+0x110>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0xf8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <TIM_Base_SetConfig+0x120>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40001800 	.word	0x40001800
 80034ac:	40001c00 	.word	0x40001c00
 80034b0:	40002000 	.word	0x40002000

080034b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <TIM_TI1_SetConfig+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01b      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d017      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a24      	ldr	r2, [pc, #144]	; (8003580 <TIM_TI1_SetConfig+0xcc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a23      	ldr	r2, [pc, #140]	; (8003584 <TIM_TI1_SetConfig+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00f      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <TIM_TI1_SetConfig+0xd4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a21      	ldr	r2, [pc, #132]	; (800358c <TIM_TI1_SetConfig+0xd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <TIM_TI1_SetConfig+0xdc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_TI1_SetConfig+0x66>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <TIM_TI1_SetConfig+0xe0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <TIM_TI1_SetConfig+0x6a>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <TIM_TI1_SetConfig+0x6c>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e003      	b.n	800353e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	b2db      	uxtb	r3, r3
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f023 030a 	bic.w	r3, r3, #10
 8003558:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 030a 	and.w	r3, r3, #10
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40010400 	.word	0x40010400
 8003590:	40014000 	.word	0x40014000
 8003594:	40001800 	.word	0x40001800

08003598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 030a 	bic.w	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0210 	bic.w	r2, r3, #16
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	031b      	lsls	r3, r3, #12
 8003638:	b29b      	uxth	r3, r3
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 0210 	bic.w	r2, r3, #16
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003696:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	031b      	lsls	r3, r3, #12
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b087      	sub	sp, #28
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003706:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	b2db      	uxtb	r3, r3
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800371a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800377e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	031b      	lsls	r3, r3, #12
 8003784:	b29b      	uxth	r3, r3
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003792:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	031b      	lsls	r3, r3, #12
 8003798:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f043 0307 	orr.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	431a      	orrs	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
	...

0800382c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e05a      	b.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a20      	ldr	r2, [pc, #128]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d01d      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10c      	bne.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40001800 	.word	0x40001800

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03f      	b.n	80039d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fb0c 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f829 	bl	80039e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039fe:	68d9      	ldr	r1, [r3, #12]
 8003a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	ea40 0301 	orr.w	r3, r0, r1
 8003a0a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003a2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a3a:	f021 010c 	bic.w	r1, r1, #12
 8003a3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	ea40 0301 	orr.w	r3, r0, r1
 8003a68:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	f040 824c 	bne.w	8003f10 <UART_SetConfig+0x530>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b96      	ldr	r3, [pc, #600]	; (8003cd8 <UART_SetConfig+0x2f8>)
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d006      	beq.n	8003a92 <UART_SetConfig+0xb2>
 8003a84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b94      	ldr	r3, [pc, #592]	; (8003cdc <UART_SetConfig+0x2fc>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8129 	bne.w	8003ce4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a92:	f7ff f971 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8003a96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003aa4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003aa8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003aac:	4622      	mov	r2, r4
 8003aae:	462b      	mov	r3, r5
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003abc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	1851      	adds	r1, r2, r1
 8003ac4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003ac8:	4629      	mov	r1, r5
 8003aca:	414b      	adcs	r3, r1
 8003acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003adc:	4649      	mov	r1, r9
 8003ade:	00cb      	lsls	r3, r1, #3
 8003ae0:	46c4      	mov	ip, r8
 8003ae2:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	00ca      	lsls	r2, r1, #3
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	4622      	mov	r2, r4
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003af8:	462b      	mov	r3, r5
 8003afa:	460a      	mov	r2, r1
 8003afc:	eb42 0303 	adc.w	r3, r2, r3
 8003b00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b10:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8003b14:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	18db      	adds	r3, r3, r3
 8003b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b20:	4613      	mov	r3, r2
 8003b22:	eb42 0303 	adc.w	r3, r2, r3
 8003b26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b2a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003b2e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003b32:	f7fc fc2b 	bl	800038c <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b69      	ldr	r3, [pc, #420]	; (8003ce0 <UART_SetConfig+0x300>)
 8003b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	011c      	lsls	r4, r3, #4
 8003b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003b4e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003b52:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8003b56:	4642      	mov	r2, r8
 8003b58:	464b      	mov	r3, r9
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003b60:	415b      	adcs	r3, r3
 8003b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b66:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	1851      	adds	r1, r2, r1
 8003b6e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8003b86:	4659      	mov	r1, fp
 8003b88:	00cb      	lsls	r3, r1, #3
 8003b8a:	4655      	mov	r5, sl
 8003b8c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003b90:	4651      	mov	r1, sl
 8003b92:	00ca      	lsls	r2, r1, #3
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	eb42 0303 	adc.w	r3, r2, r3
 8003baa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003bae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003bba:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8003bbe:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	18db      	adds	r3, r3, r3
 8003bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bd4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003bd8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8003bdc:	f7fc fbd6 	bl	800038c <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	4b3e      	ldr	r3, [pc, #248]	; (8003ce0 <UART_SetConfig+0x300>)
 8003be8:	fba3 2301 	umull	r2, r3, r3, r1
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2264      	movs	r2, #100	; 0x64
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	1acb      	subs	r3, r1, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bfc:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <UART_SetConfig+0x300>)
 8003bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c0a:	441c      	add	r4, r3
 8003c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c16:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003c1a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8003c1e:	4642      	mov	r2, r8
 8003c20:	464b      	mov	r3, r9
 8003c22:	1891      	adds	r1, r2, r2
 8003c24:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c2e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003c32:	4641      	mov	r1, r8
 8003c34:	1851      	adds	r1, r2, r1
 8003c36:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	414b      	adcs	r3, r1
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8003c4e:	4659      	mov	r1, fp
 8003c50:	00cb      	lsls	r3, r1, #3
 8003c52:	4655      	mov	r5, sl
 8003c54:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003c58:	4651      	mov	r1, sl
 8003c5a:	00ca      	lsls	r2, r1, #3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	4642      	mov	r2, r8
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	eb42 0303 	adc.w	r3, r2, r3
 8003c72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003c82:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003c86:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	18db      	adds	r3, r3, r3
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c92:	4613      	mov	r3, r2
 8003c94:	eb42 0303 	adc.w	r3, r2, r3
 8003c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c9c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003ca0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003ca4:	f7fc fb72 	bl	800038c <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <UART_SetConfig+0x300>)
 8003cae:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2164      	movs	r1, #100	; 0x64
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	3332      	adds	r3, #50	; 0x32
 8003cc0:	4a07      	ldr	r2, [pc, #28]	; (8003ce0 <UART_SetConfig+0x300>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	f003 0207 	and.w	r2, r3, #7
 8003ccc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4422      	add	r2, r4
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	e353      	b.n	8004380 <UART_SetConfig+0x9a0>
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7ff f834 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003cf6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003cfa:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003d08:	415b      	adcs	r3, r3
 8003d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d0e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d12:	4620      	mov	r0, r4
 8003d14:	4629      	mov	r1, r5
 8003d16:	4604      	mov	r4, r0
 8003d18:	eb12 0a04 	adds.w	sl, r2, r4
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	eb43 0b04 	adc.w	fp, r3, r4
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d36:	4692      	mov	sl, r2
 8003d38:	469b      	mov	fp, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d40:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d44:	460b      	mov	r3, r1
 8003d46:	eb4b 0303 	adc.w	r3, fp, r3
 8003d4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003d5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003d5e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8003d62:	460b      	mov	r3, r1
 8003d64:	18db      	adds	r3, r3, r3
 8003d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003d78:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003d7c:	f7fc fb06 	bl	800038c <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <UART_SetConfig+0x52c>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003d98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8003d9c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	67b9      	str	r1, [r7, #120]	; 0x78
 8003da8:	415b      	adcs	r3, r3
 8003daa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6739      	str	r1, [r7, #112]	; 0x70
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	677b      	str	r3, [r7, #116]	; 0x74
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4655      	mov	r5, sl
 8003dce:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003df0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dfc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003e00:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003e04:	460b      	mov	r3, r1
 8003e06:	18db      	adds	r3, r3, r3
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e12:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e1a:	f7fc fab7 	bl	800038c <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <UART_SetConfig+0x52c>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	; 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <UART_SetConfig+0x52c>)
 8003e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e48:	441c      	add	r4, r3
 8003e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003e54:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003e58:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	6639      	str	r1, [r7, #96]	; 0x60
 8003e64:	415b      	adcs	r3, r3
 8003e66:	667b      	str	r3, [r7, #100]	; 0x64
 8003e68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	1851      	adds	r1, r2, r1
 8003e70:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e72:	4649      	mov	r1, r9
 8003e74:	414b      	adcs	r3, r1
 8003e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003e84:	4659      	mov	r1, fp
 8003e86:	00cb      	lsls	r3, r1, #3
 8003e88:	4655      	mov	r5, sl
 8003e8a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003e8e:	4651      	mov	r1, sl
 8003e90:	00ca      	lsls	r2, r1, #3
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003eac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003eb8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003ebc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	18db      	adds	r3, r3, r3
 8003ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ece:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ed2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003ed6:	f7fc fa59 	bl	800038c <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <UART_SetConfig+0x52c>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <UART_SetConfig+0x52c>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 0207 	and.w	r2, r3, #7
 8003efe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4422      	add	r2, r4
 8003f06:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f08:	e23a      	b.n	8004380 <UART_SetConfig+0x9a0>
 8003f0a:	bf00      	nop
 8003f0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <UART_SetConfig+0x774>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d006      	beq.n	8003f2a <UART_SetConfig+0x54a>
 8003f1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <UART_SetConfig+0x778>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f040 811b 	bne.w	8004160 <UART_SetConfig+0x780>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f2a:	f7fe ff25 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8003f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003f3c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003f40:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003f44:	4622      	mov	r2, r4
 8003f46:	462b      	mov	r3, r5
 8003f48:	1891      	adds	r1, r2, r2
 8003f4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f4c:	415b      	adcs	r3, r3
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f54:	4620      	mov	r0, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	4604      	mov	r4, r0
 8003f5a:	eb12 0804 	adds.w	r8, r2, r4
 8003f5e:	460c      	mov	r4, r1
 8003f60:	eb43 0904 	adc.w	r9, r3, r4
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f78:	4690      	mov	r8, r2
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	eb18 0303 	adds.w	r3, r8, r3
 8003f82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003f86:	460b      	mov	r3, r1
 8003f88:	eb49 0303 	adc.w	r3, r9, r3
 8003f8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003f90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f9c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003fac:	4629      	mov	r1, r5
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003fba:	4601      	mov	r1, r0
 8003fbc:	008a      	lsls	r2, r1, #2
 8003fbe:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003fc2:	f7fc f9e3 	bl	800038c <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b64      	ldr	r3, [pc, #400]	; (800415c <UART_SetConfig+0x77c>)
 8003fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	011c      	lsls	r4, r3, #4
 8003fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003fde:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003fe2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	464b      	mov	r3, r9
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	6439      	str	r1, [r7, #64]	; 0x40
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	1851      	adds	r1, r2, r1
 8003ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	414b      	adcs	r3, r1
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800400e:	4659      	mov	r1, fp
 8004010:	00cb      	lsls	r3, r1, #3
 8004012:	4655      	mov	r5, sl
 8004014:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004018:	4651      	mov	r1, sl
 800401a:	00ca      	lsls	r2, r1, #3
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	4603      	mov	r3, r0
 8004022:	4642      	mov	r2, r8
 8004024:	189b      	adds	r3, r3, r2
 8004026:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800402a:	464b      	mov	r3, r9
 800402c:	460a      	mov	r2, r1
 800402e:	eb42 0303 	adc.w	r3, r2, r3
 8004032:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004036:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004042:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004052:	4649      	mov	r1, r9
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	4645      	mov	r5, r8
 8004058:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800405c:	4641      	mov	r1, r8
 800405e:	008a      	lsls	r2, r1, #2
 8004060:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004064:	f7fc f992 	bl	800038c <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b3b      	ldr	r3, [pc, #236]	; (800415c <UART_SetConfig+0x77c>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a36      	ldr	r2, [pc, #216]	; (800415c <UART_SetConfig+0x77c>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	441c      	add	r4, r3
 800408e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004098:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800409c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80040a0:	4642      	mov	r2, r8
 80040a2:	464b      	mov	r3, r9
 80040a4:	1891      	adds	r1, r2, r2
 80040a6:	6339      	str	r1, [r7, #48]	; 0x30
 80040a8:	415b      	adcs	r3, r3
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040b0:	4641      	mov	r1, r8
 80040b2:	1851      	adds	r1, r2, r1
 80040b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80040b6:	4649      	mov	r1, r9
 80040b8:	414b      	adcs	r3, r1
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80040c8:	4659      	mov	r1, fp
 80040ca:	00cb      	lsls	r3, r1, #3
 80040cc:	4655      	mov	r5, sl
 80040ce:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80040d2:	4651      	mov	r1, sl
 80040d4:	00ca      	lsls	r2, r1, #3
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	4642      	mov	r2, r8
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040e4:	464b      	mov	r3, r9
 80040e6:	460a      	mov	r2, r1
 80040e8:	eb42 0303 	adc.w	r3, r2, r3
 80040ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80040f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040fc:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800410c:	4649      	mov	r1, r9
 800410e:	008b      	lsls	r3, r1, #2
 8004110:	4645      	mov	r5, r8
 8004112:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004116:	4641      	mov	r1, r8
 8004118:	008a      	lsls	r2, r1, #2
 800411a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800411e:	f7fc f935 	bl	800038c <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <UART_SetConfig+0x77c>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	; 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	3332      	adds	r3, #50	; 0x32
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <UART_SetConfig+0x77c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4422      	add	r2, r4
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	e116      	b.n	8004380 <UART_SetConfig+0x9a0>
 8004152:	bf00      	nop
 8004154:	40011000 	.word	0x40011000
 8004158:	40011400 	.word	0x40011400
 800415c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe fdf6 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004164:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004168:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004172:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004176:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800417a:	4642      	mov	r2, r8
 800417c:	464b      	mov	r3, r9
 800417e:	1891      	adds	r1, r2, r2
 8004180:	6239      	str	r1, [r7, #32]
 8004182:	415b      	adcs	r3, r3
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
 8004186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800418a:	4641      	mov	r1, r8
 800418c:	1854      	adds	r4, r2, r1
 800418e:	46cc      	mov	ip, r9
 8004190:	eb43 050c 	adc.w	r5, r3, ip
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	4603      	mov	r3, r0
 80041ae:	18e3      	adds	r3, r4, r3
 80041b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80041b4:	460b      	mov	r3, r1
 80041b6:	eb45 0303 	adc.w	r3, r5, r3
 80041ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80041be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80041ca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80041da:	4629      	mov	r1, r5
 80041dc:	008b      	lsls	r3, r1, #2
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	4604      	mov	r4, r0
 80041e4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80041e8:	4601      	mov	r1, r0
 80041ea:	008a      	lsls	r2, r1, #2
 80041ec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80041f0:	f7fc f8cc 	bl	800038c <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b64      	ldr	r3, [pc, #400]	; (800438c <UART_SetConfig+0x9ac>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011c      	lsls	r4, r3, #4
 8004202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800420c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004210:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	61b9      	str	r1, [r7, #24]
 800421c:	415b      	adcs	r3, r3
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6139      	str	r1, [r7, #16]
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4655      	mov	r5, sl
 8004242:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004258:	464b      	mov	r3, r9
 800425a:	460a      	mov	r2, r1
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004270:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004280:	4649      	mov	r1, r9
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	4645      	mov	r5, r8
 8004286:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800428a:	4641      	mov	r1, r8
 800428c:	008a      	lsls	r2, r1, #2
 800428e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004292:	f7fc f87b 	bl	800038c <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <UART_SetConfig+0x9ac>)
 800429c:	fba3 1302 	umull	r1, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2164      	movs	r1, #100	; 0x64
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a37      	ldr	r2, [pc, #220]	; (800438c <UART_SetConfig+0x9ac>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ba:	441c      	add	r4, r3
 80042bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042ca:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042de:	4641      	mov	r1, r8
 80042e0:	1851      	adds	r1, r2, r1
 80042e2:	6039      	str	r1, [r7, #0]
 80042e4:	4649      	mov	r1, r9
 80042e6:	414b      	adcs	r3, r1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f6:	4659      	mov	r1, fp
 80042f8:	00cb      	lsls	r3, r1, #3
 80042fa:	4655      	mov	r5, sl
 80042fc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004300:	4651      	mov	r1, sl
 8004302:	00ca      	lsls	r2, r1, #3
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	4603      	mov	r3, r0
 800430a:	4642      	mov	r2, r8
 800430c:	189b      	adds	r3, r3, r2
 800430e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004312:	464b      	mov	r3, r9
 8004314:	460a      	mov	r2, r1
 8004316:	eb42 0303 	adc.w	r3, r2, r3
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800431e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800432a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800433a:	4649      	mov	r1, r9
 800433c:	008b      	lsls	r3, r1, #2
 800433e:	4645      	mov	r5, r8
 8004340:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004344:	4641      	mov	r1, r8
 8004346:	008a      	lsls	r2, r1, #2
 8004348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800434c:	f7fc f81e 	bl	800038c <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <UART_SetConfig+0x9ac>)
 8004356:	fba3 1302 	umull	r1, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	; 0x32
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <UART_SetConfig+0x9ac>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4422      	add	r2, r4
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	e7ff      	b.n	8004380 <UART_SetConfig+0x9a0>
 8004380:	bf00      	nop
 8004382:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <atoi>:
 8004390:	220a      	movs	r2, #10
 8004392:	2100      	movs	r1, #0
 8004394:	f000 b9aa 	b.w	80046ec <strtol>

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <exit>:
 80043a4:	b508      	push	{r3, lr}
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <exit+0x20>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	b113      	cbz	r3, 80043b2 <exit+0xe>
 80043ac:	2100      	movs	r1, #0
 80043ae:	f3af 8000 	nop.w
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <exit+0x24>)
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043b8:	b103      	cbz	r3, 80043bc <exit+0x18>
 80043ba:	4798      	blx	r3
 80043bc:	4620      	mov	r0, r4
 80043be:	f7fc fb21 	bl	8000a04 <_exit>
 80043c2:	bf00      	nop
 80043c4:	00000000 	.word	0x00000000
 80043c8:	08005430 	.word	0x08005430

080043cc <_fwrite_r>:
 80043cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	9c08      	ldr	r4, [sp, #32]
 80043d2:	468a      	mov	sl, r1
 80043d4:	4690      	mov	r8, r2
 80043d6:	fb02 f903 	mul.w	r9, r2, r3
 80043da:	4605      	mov	r5, r0
 80043dc:	b118      	cbz	r0, 80043e6 <_fwrite_r+0x1a>
 80043de:	6983      	ldr	r3, [r0, #24]
 80043e0:	b90b      	cbnz	r3, 80043e6 <_fwrite_r+0x1a>
 80043e2:	f000 fb63 	bl	8004aac <__sinit>
 80043e6:	4b26      	ldr	r3, [pc, #152]	; (8004480 <_fwrite_r+0xb4>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d123      	bne.n	8004434 <_fwrite_r+0x68>
 80043ec:	686c      	ldr	r4, [r5, #4]
 80043ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f0:	07de      	lsls	r6, r3, #31
 80043f2:	d405      	bmi.n	8004400 <_fwrite_r+0x34>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	0598      	lsls	r0, r3, #22
 80043f8:	d402      	bmi.n	8004400 <_fwrite_r+0x34>
 80043fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fc:	f000 f879 	bl	80044f2 <__retarget_lock_acquire_recursive>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	0719      	lsls	r1, r3, #28
 8004404:	d520      	bpl.n	8004448 <_fwrite_r+0x7c>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	b1f3      	cbz	r3, 8004448 <_fwrite_r+0x7c>
 800440a:	2600      	movs	r6, #0
 800440c:	454e      	cmp	r6, r9
 800440e:	d029      	beq.n	8004464 <_fwrite_r+0x98>
 8004410:	68a7      	ldr	r7, [r4, #8]
 8004412:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8004416:	3f01      	subs	r7, #1
 8004418:	2f00      	cmp	r7, #0
 800441a:	60a7      	str	r7, [r4, #8]
 800441c:	da04      	bge.n	8004428 <_fwrite_r+0x5c>
 800441e:	69a3      	ldr	r3, [r4, #24]
 8004420:	429f      	cmp	r7, r3
 8004422:	db19      	blt.n	8004458 <_fwrite_r+0x8c>
 8004424:	290a      	cmp	r1, #10
 8004426:	d017      	beq.n	8004458 <_fwrite_r+0x8c>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	7019      	strb	r1, [r3, #0]
 8004430:	3601      	adds	r6, #1
 8004432:	e7eb      	b.n	800440c <_fwrite_r+0x40>
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <_fwrite_r+0xb8>)
 8004436:	429c      	cmp	r4, r3
 8004438:	d101      	bne.n	800443e <_fwrite_r+0x72>
 800443a:	68ac      	ldr	r4, [r5, #8]
 800443c:	e7d7      	b.n	80043ee <_fwrite_r+0x22>
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <_fwrite_r+0xbc>)
 8004440:	429c      	cmp	r4, r3
 8004442:	bf08      	it	eq
 8004444:	68ec      	ldreq	r4, [r5, #12]
 8004446:	e7d2      	b.n	80043ee <_fwrite_r+0x22>
 8004448:	4621      	mov	r1, r4
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f9aa 	bl	80047a4 <__swsetup_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	d0da      	beq.n	800440a <_fwrite_r+0x3e>
 8004454:	2600      	movs	r6, #0
 8004456:	e005      	b.n	8004464 <_fwrite_r+0x98>
 8004458:	4622      	mov	r2, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f950 	bl	8004700 <__swbuf_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d1e5      	bne.n	8004430 <_fwrite_r+0x64>
 8004464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004466:	07da      	lsls	r2, r3, #31
 8004468:	d405      	bmi.n	8004476 <_fwrite_r+0xaa>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	059b      	lsls	r3, r3, #22
 800446e:	d402      	bmi.n	8004476 <_fwrite_r+0xaa>
 8004470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004472:	f000 f83f 	bl	80044f4 <__retarget_lock_release_recursive>
 8004476:	fbb6 f0f8 	udiv	r0, r6, r8
 800447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447e:	bf00      	nop
 8004480:	08005558 	.word	0x08005558
 8004484:	08005578 	.word	0x08005578
 8004488:	08005538 	.word	0x08005538

0800448c <fwrite>:
 800448c:	b507      	push	{r0, r1, r2, lr}
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	460a      	mov	r2, r1
 8004494:	4601      	mov	r1, r0
 8004496:	4803      	ldr	r0, [pc, #12]	; (80044a4 <fwrite+0x18>)
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	f7ff ff97 	bl	80043cc <_fwrite_r>
 800449e:	b003      	add	sp, #12
 80044a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044a4:	2000000c 	.word	0x2000000c

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4d0d      	ldr	r5, [pc, #52]	; (80044e0 <__libc_init_array+0x38>)
 80044ac:	4c0d      	ldr	r4, [pc, #52]	; (80044e4 <__libc_init_array+0x3c>)
 80044ae:	1b64      	subs	r4, r4, r5
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	2600      	movs	r6, #0
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	4d0b      	ldr	r5, [pc, #44]	; (80044e8 <__libc_init_array+0x40>)
 80044ba:	4c0c      	ldr	r4, [pc, #48]	; (80044ec <__libc_init_array+0x44>)
 80044bc:	f000 ff06 	bl	80052cc <_init>
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	2600      	movs	r6, #0
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	080055a0 	.word	0x080055a0
 80044e4:	080055a0 	.word	0x080055a0
 80044e8:	080055a0 	.word	0x080055a0
 80044ec:	080055a4 	.word	0x080055a4

080044f0 <__retarget_lock_init_recursive>:
 80044f0:	4770      	bx	lr

080044f2 <__retarget_lock_acquire_recursive>:
 80044f2:	4770      	bx	lr

080044f4 <__retarget_lock_release_recursive>:
 80044f4:	4770      	bx	lr

080044f6 <memset>:
 80044f6:	4402      	add	r2, r0
 80044f8:	4603      	mov	r3, r0
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d100      	bne.n	8004500 <memset+0xa>
 80044fe:	4770      	bx	lr
 8004500:	f803 1b01 	strb.w	r1, [r3], #1
 8004504:	e7f9      	b.n	80044fa <memset+0x4>
	...

08004508 <_puts_r>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	460e      	mov	r6, r1
 800450c:	4605      	mov	r5, r0
 800450e:	b118      	cbz	r0, 8004518 <_puts_r+0x10>
 8004510:	6983      	ldr	r3, [r0, #24]
 8004512:	b90b      	cbnz	r3, 8004518 <_puts_r+0x10>
 8004514:	f000 faca 	bl	8004aac <__sinit>
 8004518:	69ab      	ldr	r3, [r5, #24]
 800451a:	68ac      	ldr	r4, [r5, #8]
 800451c:	b913      	cbnz	r3, 8004524 <_puts_r+0x1c>
 800451e:	4628      	mov	r0, r5
 8004520:	f000 fac4 	bl	8004aac <__sinit>
 8004524:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <_puts_r+0xd0>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d120      	bne.n	800456c <_puts_r+0x64>
 800452a:	686c      	ldr	r4, [r5, #4]
 800452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452e:	07db      	lsls	r3, r3, #31
 8004530:	d405      	bmi.n	800453e <_puts_r+0x36>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	0598      	lsls	r0, r3, #22
 8004536:	d402      	bmi.n	800453e <_puts_r+0x36>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f7ff ffda 	bl	80044f2 <__retarget_lock_acquire_recursive>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	0719      	lsls	r1, r3, #28
 8004542:	d51d      	bpl.n	8004580 <_puts_r+0x78>
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b1db      	cbz	r3, 8004580 <_puts_r+0x78>
 8004548:	3e01      	subs	r6, #1
 800454a:	68a3      	ldr	r3, [r4, #8]
 800454c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004550:	3b01      	subs	r3, #1
 8004552:	60a3      	str	r3, [r4, #8]
 8004554:	bb39      	cbnz	r1, 80045a6 <_puts_r+0x9e>
 8004556:	2b00      	cmp	r3, #0
 8004558:	da38      	bge.n	80045cc <_puts_r+0xc4>
 800455a:	4622      	mov	r2, r4
 800455c:	210a      	movs	r1, #10
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f8ce 	bl	8004700 <__swbuf_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d011      	beq.n	800458c <_puts_r+0x84>
 8004568:	250a      	movs	r5, #10
 800456a:	e011      	b.n	8004590 <_puts_r+0x88>
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <_puts_r+0xd4>)
 800456e:	429c      	cmp	r4, r3
 8004570:	d101      	bne.n	8004576 <_puts_r+0x6e>
 8004572:	68ac      	ldr	r4, [r5, #8]
 8004574:	e7da      	b.n	800452c <_puts_r+0x24>
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <_puts_r+0xd8>)
 8004578:	429c      	cmp	r4, r3
 800457a:	bf08      	it	eq
 800457c:	68ec      	ldreq	r4, [r5, #12]
 800457e:	e7d5      	b.n	800452c <_puts_r+0x24>
 8004580:	4621      	mov	r1, r4
 8004582:	4628      	mov	r0, r5
 8004584:	f000 f90e 	bl	80047a4 <__swsetup_r>
 8004588:	2800      	cmp	r0, #0
 800458a:	d0dd      	beq.n	8004548 <_puts_r+0x40>
 800458c:	f04f 35ff 	mov.w	r5, #4294967295
 8004590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004592:	07da      	lsls	r2, r3, #31
 8004594:	d405      	bmi.n	80045a2 <_puts_r+0x9a>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	059b      	lsls	r3, r3, #22
 800459a:	d402      	bmi.n	80045a2 <_puts_r+0x9a>
 800459c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800459e:	f7ff ffa9 	bl	80044f4 <__retarget_lock_release_recursive>
 80045a2:	4628      	mov	r0, r5
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da04      	bge.n	80045b4 <_puts_r+0xac>
 80045aa:	69a2      	ldr	r2, [r4, #24]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	dc06      	bgt.n	80045be <_puts_r+0xb6>
 80045b0:	290a      	cmp	r1, #10
 80045b2:	d004      	beq.n	80045be <_puts_r+0xb6>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	7019      	strb	r1, [r3, #0]
 80045bc:	e7c5      	b.n	800454a <_puts_r+0x42>
 80045be:	4622      	mov	r2, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 f89d 	bl	8004700 <__swbuf_r>
 80045c6:	3001      	adds	r0, #1
 80045c8:	d1bf      	bne.n	800454a <_puts_r+0x42>
 80045ca:	e7df      	b.n	800458c <_puts_r+0x84>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	250a      	movs	r5, #10
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	6022      	str	r2, [r4, #0]
 80045d4:	701d      	strb	r5, [r3, #0]
 80045d6:	e7db      	b.n	8004590 <_puts_r+0x88>
 80045d8:	08005558 	.word	0x08005558
 80045dc:	08005578 	.word	0x08005578
 80045e0:	08005538 	.word	0x08005538

080045e4 <puts>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <puts+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f7ff bf8d 	b.w	8004508 <_puts_r>
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <_strtol_l.constprop.0>:
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fa:	4680      	mov	r8, r0
 80045fc:	d001      	beq.n	8004602 <_strtol_l.constprop.0+0xe>
 80045fe:	2b24      	cmp	r3, #36	; 0x24
 8004600:	d906      	bls.n	8004610 <_strtol_l.constprop.0+0x1c>
 8004602:	f7ff fec9 	bl	8004398 <__errno>
 8004606:	2316      	movs	r3, #22
 8004608:	6003      	str	r3, [r0, #0]
 800460a:	2000      	movs	r0, #0
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	4f35      	ldr	r7, [pc, #212]	; (80046e8 <_strtol_l.constprop.0+0xf4>)
 8004612:	460d      	mov	r5, r1
 8004614:	4628      	mov	r0, r5
 8004616:	f815 4b01 	ldrb.w	r4, [r5], #1
 800461a:	5de6      	ldrb	r6, [r4, r7]
 800461c:	f016 0608 	ands.w	r6, r6, #8
 8004620:	d1f8      	bne.n	8004614 <_strtol_l.constprop.0+0x20>
 8004622:	2c2d      	cmp	r4, #45	; 0x2d
 8004624:	d12f      	bne.n	8004686 <_strtol_l.constprop.0+0x92>
 8004626:	782c      	ldrb	r4, [r5, #0]
 8004628:	2601      	movs	r6, #1
 800462a:	1c85      	adds	r5, r0, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d057      	beq.n	80046e0 <_strtol_l.constprop.0+0xec>
 8004630:	2b10      	cmp	r3, #16
 8004632:	d109      	bne.n	8004648 <_strtol_l.constprop.0+0x54>
 8004634:	2c30      	cmp	r4, #48	; 0x30
 8004636:	d107      	bne.n	8004648 <_strtol_l.constprop.0+0x54>
 8004638:	7828      	ldrb	r0, [r5, #0]
 800463a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800463e:	2858      	cmp	r0, #88	; 0x58
 8004640:	d149      	bne.n	80046d6 <_strtol_l.constprop.0+0xe2>
 8004642:	786c      	ldrb	r4, [r5, #1]
 8004644:	2310      	movs	r3, #16
 8004646:	3502      	adds	r5, #2
 8004648:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800464c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004650:	2700      	movs	r7, #0
 8004652:	fbbe f9f3 	udiv	r9, lr, r3
 8004656:	4638      	mov	r0, r7
 8004658:	fb03 ea19 	mls	sl, r3, r9, lr
 800465c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004660:	f1bc 0f09 	cmp.w	ip, #9
 8004664:	d814      	bhi.n	8004690 <_strtol_l.constprop.0+0x9c>
 8004666:	4664      	mov	r4, ip
 8004668:	42a3      	cmp	r3, r4
 800466a:	dd22      	ble.n	80046b2 <_strtol_l.constprop.0+0xbe>
 800466c:	2f00      	cmp	r7, #0
 800466e:	db1d      	blt.n	80046ac <_strtol_l.constprop.0+0xb8>
 8004670:	4581      	cmp	r9, r0
 8004672:	d31b      	bcc.n	80046ac <_strtol_l.constprop.0+0xb8>
 8004674:	d101      	bne.n	800467a <_strtol_l.constprop.0+0x86>
 8004676:	45a2      	cmp	sl, r4
 8004678:	db18      	blt.n	80046ac <_strtol_l.constprop.0+0xb8>
 800467a:	fb00 4003 	mla	r0, r0, r3, r4
 800467e:	2701      	movs	r7, #1
 8004680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004684:	e7ea      	b.n	800465c <_strtol_l.constprop.0+0x68>
 8004686:	2c2b      	cmp	r4, #43	; 0x2b
 8004688:	bf04      	itt	eq
 800468a:	782c      	ldrbeq	r4, [r5, #0]
 800468c:	1c85      	addeq	r5, r0, #2
 800468e:	e7cd      	b.n	800462c <_strtol_l.constprop.0+0x38>
 8004690:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004694:	f1bc 0f19 	cmp.w	ip, #25
 8004698:	d801      	bhi.n	800469e <_strtol_l.constprop.0+0xaa>
 800469a:	3c37      	subs	r4, #55	; 0x37
 800469c:	e7e4      	b.n	8004668 <_strtol_l.constprop.0+0x74>
 800469e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80046a2:	f1bc 0f19 	cmp.w	ip, #25
 80046a6:	d804      	bhi.n	80046b2 <_strtol_l.constprop.0+0xbe>
 80046a8:	3c57      	subs	r4, #87	; 0x57
 80046aa:	e7dd      	b.n	8004668 <_strtol_l.constprop.0+0x74>
 80046ac:	f04f 37ff 	mov.w	r7, #4294967295
 80046b0:	e7e6      	b.n	8004680 <_strtol_l.constprop.0+0x8c>
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	da07      	bge.n	80046c6 <_strtol_l.constprop.0+0xd2>
 80046b6:	2322      	movs	r3, #34	; 0x22
 80046b8:	f8c8 3000 	str.w	r3, [r8]
 80046bc:	4670      	mov	r0, lr
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d0a4      	beq.n	800460c <_strtol_l.constprop.0+0x18>
 80046c2:	1e69      	subs	r1, r5, #1
 80046c4:	e005      	b.n	80046d2 <_strtol_l.constprop.0+0xde>
 80046c6:	b106      	cbz	r6, 80046ca <_strtol_l.constprop.0+0xd6>
 80046c8:	4240      	negs	r0, r0
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d09e      	beq.n	800460c <_strtol_l.constprop.0+0x18>
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	d1f7      	bne.n	80046c2 <_strtol_l.constprop.0+0xce>
 80046d2:	6011      	str	r1, [r2, #0]
 80046d4:	e79a      	b.n	800460c <_strtol_l.constprop.0+0x18>
 80046d6:	2430      	movs	r4, #48	; 0x30
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1b5      	bne.n	8004648 <_strtol_l.constprop.0+0x54>
 80046dc:	2308      	movs	r3, #8
 80046de:	e7b3      	b.n	8004648 <_strtol_l.constprop.0+0x54>
 80046e0:	2c30      	cmp	r4, #48	; 0x30
 80046e2:	d0a9      	beq.n	8004638 <_strtol_l.constprop.0+0x44>
 80046e4:	230a      	movs	r3, #10
 80046e6:	e7af      	b.n	8004648 <_strtol_l.constprop.0+0x54>
 80046e8:	08005435 	.word	0x08005435

080046ec <strtol>:
 80046ec:	4613      	mov	r3, r2
 80046ee:	460a      	mov	r2, r1
 80046f0:	4601      	mov	r1, r0
 80046f2:	4802      	ldr	r0, [pc, #8]	; (80046fc <strtol+0x10>)
 80046f4:	6800      	ldr	r0, [r0, #0]
 80046f6:	f7ff bf7d 	b.w	80045f4 <_strtol_l.constprop.0>
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c

08004700 <__swbuf_r>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	460e      	mov	r6, r1
 8004704:	4614      	mov	r4, r2
 8004706:	4605      	mov	r5, r0
 8004708:	b118      	cbz	r0, 8004712 <__swbuf_r+0x12>
 800470a:	6983      	ldr	r3, [r0, #24]
 800470c:	b90b      	cbnz	r3, 8004712 <__swbuf_r+0x12>
 800470e:	f000 f9cd 	bl	8004aac <__sinit>
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <__swbuf_r+0x98>)
 8004714:	429c      	cmp	r4, r3
 8004716:	d12b      	bne.n	8004770 <__swbuf_r+0x70>
 8004718:	686c      	ldr	r4, [r5, #4]
 800471a:	69a3      	ldr	r3, [r4, #24]
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	071a      	lsls	r2, r3, #28
 8004722:	d52f      	bpl.n	8004784 <__swbuf_r+0x84>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	b36b      	cbz	r3, 8004784 <__swbuf_r+0x84>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	6963      	ldr	r3, [r4, #20]
 8004730:	b2f6      	uxtb	r6, r6
 8004732:	4283      	cmp	r3, r0
 8004734:	4637      	mov	r7, r6
 8004736:	dc04      	bgt.n	8004742 <__swbuf_r+0x42>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f922 	bl	8004984 <_fflush_r>
 8004740:	bb30      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	3b01      	subs	r3, #1
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	701e      	strb	r6, [r3, #0]
 8004750:	6963      	ldr	r3, [r4, #20]
 8004752:	3001      	adds	r0, #1
 8004754:	4283      	cmp	r3, r0
 8004756:	d004      	beq.n	8004762 <__swbuf_r+0x62>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d506      	bpl.n	800476c <__swbuf_r+0x6c>
 800475e:	2e0a      	cmp	r6, #10
 8004760:	d104      	bne.n	800476c <__swbuf_r+0x6c>
 8004762:	4621      	mov	r1, r4
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f90d 	bl	8004984 <_fflush_r>
 800476a:	b988      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 800476c:	4638      	mov	r0, r7
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <__swbuf_r+0x9c>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swbuf_r+0x7a>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7cf      	b.n	800471a <__swbuf_r+0x1a>
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <__swbuf_r+0xa0>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7ca      	b.n	800471a <__swbuf_r+0x1a>
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f80c 	bl	80047a4 <__swsetup_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0cb      	beq.n	8004728 <__swbuf_r+0x28>
 8004790:	f04f 37ff 	mov.w	r7, #4294967295
 8004794:	e7ea      	b.n	800476c <__swbuf_r+0x6c>
 8004796:	bf00      	nop
 8004798:	08005558 	.word	0x08005558
 800479c:	08005578 	.word	0x08005578
 80047a0:	08005538 	.word	0x08005538

080047a4 <__swsetup_r>:
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <__swsetup_r+0xcc>)
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	4606      	mov	r6, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	b125      	cbz	r5, 80047ba <__swsetup_r+0x16>
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	b913      	cbnz	r3, 80047ba <__swsetup_r+0x16>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f979 	bl	8004aac <__sinit>
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <__swsetup_r+0xd0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d10f      	bne.n	80047e0 <__swsetup_r+0x3c>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	d42c      	bmi.n	8004826 <__swsetup_r+0x82>
 80047cc:	06dd      	lsls	r5, r3, #27
 80047ce:	d411      	bmi.n	80047f4 <__swsetup_r+0x50>
 80047d0:	2309      	movs	r3, #9
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	e03e      	b.n	800485e <__swsetup_r+0xba>
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <__swsetup_r+0xd4>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swsetup_r+0x46>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7eb      	b.n	80047c2 <__swsetup_r+0x1e>
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <__swsetup_r+0xd8>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf08      	it	eq
 80047f0:	68ec      	ldreq	r4, [r5, #12]
 80047f2:	e7e6      	b.n	80047c2 <__swsetup_r+0x1e>
 80047f4:	0758      	lsls	r0, r3, #29
 80047f6:	d512      	bpl.n	800481e <__swsetup_r+0x7a>
 80047f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fa:	b141      	cbz	r1, 800480e <__swsetup_r+0x6a>
 80047fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004800:	4299      	cmp	r1, r3
 8004802:	d002      	beq.n	800480a <__swsetup_r+0x66>
 8004804:	4630      	mov	r0, r6
 8004806:	f000 fa53 	bl	8004cb0 <_free_r>
 800480a:	2300      	movs	r3, #0
 800480c:	6363      	str	r3, [r4, #52]	; 0x34
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	b94b      	cbnz	r3, 800483e <__swsetup_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d003      	beq.n	800483e <__swsetup_r+0x9a>
 8004836:	4621      	mov	r1, r4
 8004838:	4630      	mov	r0, r6
 800483a:	f000 f9f9 	bl	8004c30 <__smakebuf_r>
 800483e:	89a0      	ldrh	r0, [r4, #12]
 8004840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004844:	f010 0301 	ands.w	r3, r0, #1
 8004848:	d00a      	beq.n	8004860 <__swsetup_r+0xbc>
 800484a:	2300      	movs	r3, #0
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	425b      	negs	r3, r3
 8004852:	61a3      	str	r3, [r4, #24]
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b943      	cbnz	r3, 800486a <__swsetup_r+0xc6>
 8004858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800485c:	d1ba      	bne.n	80047d4 <__swsetup_r+0x30>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	0781      	lsls	r1, r0, #30
 8004862:	bf58      	it	pl
 8004864:	6963      	ldrpl	r3, [r4, #20]
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	e7f4      	b.n	8004854 <__swsetup_r+0xb0>
 800486a:	2000      	movs	r0, #0
 800486c:	e7f7      	b.n	800485e <__swsetup_r+0xba>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c
 8004874:	08005558 	.word	0x08005558
 8004878:	08005578 	.word	0x08005578
 800487c:	08005538 	.word	0x08005538

08004880 <__sflush_r>:
 8004880:	898a      	ldrh	r2, [r1, #12]
 8004882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004884:	4605      	mov	r5, r0
 8004886:	0710      	lsls	r0, r2, #28
 8004888:	460c      	mov	r4, r1
 800488a:	d457      	bmi.n	800493c <__sflush_r+0xbc>
 800488c:	684b      	ldr	r3, [r1, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc04      	bgt.n	800489c <__sflush_r+0x1c>
 8004892:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	dc01      	bgt.n	800489c <__sflush_r+0x1c>
 8004898:	2000      	movs	r0, #0
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d0fa      	beq.n	8004898 <__sflush_r+0x18>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a8:	682f      	ldr	r7, [r5, #0]
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	d032      	beq.n	8004914 <__sflush_r+0x94>
 80048ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	075a      	lsls	r2, r3, #29
 80048b4:	d505      	bpl.n	80048c2 <__sflush_r+0x42>
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	1ac0      	subs	r0, r0, r3
 80048ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048bc:	b10b      	cbz	r3, 80048c2 <__sflush_r+0x42>
 80048be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c0:	1ac0      	subs	r0, r0, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	4602      	mov	r2, r0
 80048c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c8:	6a21      	ldr	r1, [r4, #32]
 80048ca:	4628      	mov	r0, r5
 80048cc:	47b0      	blx	r6
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	d106      	bne.n	80048e2 <__sflush_r+0x62>
 80048d4:	6829      	ldr	r1, [r5, #0]
 80048d6:	291d      	cmp	r1, #29
 80048d8:	d82c      	bhi.n	8004934 <__sflush_r+0xb4>
 80048da:	4a29      	ldr	r2, [pc, #164]	; (8004980 <__sflush_r+0x100>)
 80048dc:	40ca      	lsrs	r2, r1
 80048de:	07d6      	lsls	r6, r2, #31
 80048e0:	d528      	bpl.n	8004934 <__sflush_r+0xb4>
 80048e2:	2200      	movs	r2, #0
 80048e4:	6062      	str	r2, [r4, #4]
 80048e6:	04d9      	lsls	r1, r3, #19
 80048e8:	6922      	ldr	r2, [r4, #16]
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	d504      	bpl.n	80048f8 <__sflush_r+0x78>
 80048ee:	1c42      	adds	r2, r0, #1
 80048f0:	d101      	bne.n	80048f6 <__sflush_r+0x76>
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	b903      	cbnz	r3, 80048f8 <__sflush_r+0x78>
 80048f6:	6560      	str	r0, [r4, #84]	; 0x54
 80048f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fa:	602f      	str	r7, [r5, #0]
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d0cb      	beq.n	8004898 <__sflush_r+0x18>
 8004900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004904:	4299      	cmp	r1, r3
 8004906:	d002      	beq.n	800490e <__sflush_r+0x8e>
 8004908:	4628      	mov	r0, r5
 800490a:	f000 f9d1 	bl	8004cb0 <_free_r>
 800490e:	2000      	movs	r0, #0
 8004910:	6360      	str	r0, [r4, #52]	; 0x34
 8004912:	e7c2      	b.n	800489a <__sflush_r+0x1a>
 8004914:	6a21      	ldr	r1, [r4, #32]
 8004916:	2301      	movs	r3, #1
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	1c41      	adds	r1, r0, #1
 800491e:	d1c7      	bne.n	80048b0 <__sflush_r+0x30>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0c4      	beq.n	80048b0 <__sflush_r+0x30>
 8004926:	2b1d      	cmp	r3, #29
 8004928:	d001      	beq.n	800492e <__sflush_r+0xae>
 800492a:	2b16      	cmp	r3, #22
 800492c:	d101      	bne.n	8004932 <__sflush_r+0xb2>
 800492e:	602f      	str	r7, [r5, #0]
 8004930:	e7b2      	b.n	8004898 <__sflush_r+0x18>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	e7ae      	b.n	800489a <__sflush_r+0x1a>
 800493c:	690f      	ldr	r7, [r1, #16]
 800493e:	2f00      	cmp	r7, #0
 8004940:	d0aa      	beq.n	8004898 <__sflush_r+0x18>
 8004942:	0793      	lsls	r3, r2, #30
 8004944:	680e      	ldr	r6, [r1, #0]
 8004946:	bf08      	it	eq
 8004948:	694b      	ldreq	r3, [r1, #20]
 800494a:	600f      	str	r7, [r1, #0]
 800494c:	bf18      	it	ne
 800494e:	2300      	movne	r3, #0
 8004950:	1bf6      	subs	r6, r6, r7
 8004952:	608b      	str	r3, [r1, #8]
 8004954:	2e00      	cmp	r6, #0
 8004956:	dd9f      	ble.n	8004898 <__sflush_r+0x18>
 8004958:	6a21      	ldr	r1, [r4, #32]
 800495a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800495e:	4633      	mov	r3, r6
 8004960:	463a      	mov	r2, r7
 8004962:	4628      	mov	r0, r5
 8004964:	47e0      	blx	ip
 8004966:	2800      	cmp	r0, #0
 8004968:	dc06      	bgt.n	8004978 <__sflush_r+0xf8>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e790      	b.n	800489a <__sflush_r+0x1a>
 8004978:	4407      	add	r7, r0
 800497a:	1a36      	subs	r6, r6, r0
 800497c:	e7ea      	b.n	8004954 <__sflush_r+0xd4>
 800497e:	bf00      	nop
 8004980:	20400001 	.word	0x20400001

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6983      	ldr	r3, [r0, #24]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f000 f887 	bl	8004aac <__sinit>
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <_fflush_r+0x6c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11b      	bne.n	80049dc <_fflush_r+0x58>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x3a>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x3a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f7ff fd9a 	bl	80044f2 <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff5d 	bl	8004880 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	07da      	lsls	r2, r3, #31
 80049ca:	4605      	mov	r5, r0
 80049cc:	d4e0      	bmi.n	8004990 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4dd      	bmi.n	8004990 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f7ff fd8d 	bl	80044f4 <__retarget_lock_release_recursive>
 80049da:	e7d9      	b.n	8004990 <_fflush_r+0xc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_fflush_r+0x70>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <_fflush_r+0x62>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7df      	b.n	80049a6 <_fflush_r+0x22>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <_fflush_r+0x74>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7da      	b.n	80049a6 <_fflush_r+0x22>
 80049f0:	08005558 	.word	0x08005558
 80049f4:	08005578 	.word	0x08005578
 80049f8:	08005538 	.word	0x08005538

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff fd6c 	bl	80044f6 <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x3c>)
 8004a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x40>)
 8004a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x44>)
 8004a2c:	6224      	str	r4, [r4, #32]
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	08004e8d 	.word	0x08004e8d
 8004a38:	08004eaf 	.word	0x08004eaf
 8004a3c:	08004ee7 	.word	0x08004ee7
 8004a40:	08004f0b 	.word	0x08004f0b

08004a44 <_cleanup_r>:
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <_cleanup_r+0x8>)
 8004a46:	f000 b8af 	b.w	8004ba8 <_fwalk_reent>
 8004a4a:	bf00      	nop
 8004a4c:	08004985 	.word	0x08004985

08004a50 <__sfmoreglue>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2268      	movs	r2, #104	; 0x68
 8004a54:	1e4d      	subs	r5, r1, #1
 8004a56:	4355      	muls	r5, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5e:	f000 f991 	bl	8004d84 <_malloc_r>
 8004a62:	4604      	mov	r4, r0
 8004a64:	b140      	cbz	r0, 8004a78 <__sfmoreglue+0x28>
 8004a66:	2100      	movs	r1, #0
 8004a68:	e9c0 1600 	strd	r1, r6, [r0]
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a74:	f7ff fd3f 	bl	80044f6 <memset>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f7ff bd38 	b.w	80044f2 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000241 	.word	0x20000241

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f7ff bd33 	b.w	80044f4 <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000241 	.word	0x20000241

08004a94 <__sinit_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sinit_lock_acquire+0x8>)
 8004a96:	f7ff bd2c 	b.w	80044f2 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000242 	.word	0x20000242

08004aa0 <__sinit_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sinit_lock_release+0x8>)
 8004aa2:	f7ff bd27 	b.w	80044f4 <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000242 	.word	0x20000242

08004aac <__sinit>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	f7ff fff0 	bl	8004a94 <__sinit_lock_acquire>
 8004ab4:	69a3      	ldr	r3, [r4, #24]
 8004ab6:	b11b      	cbz	r3, 8004ac0 <__sinit+0x14>
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f7ff bff0 	b.w	8004aa0 <__sinit_lock_release>
 8004ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <__sinit+0x68>)
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <__sinit+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	bf04      	itt	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	61a3      	streq	r3, [r4, #24]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f820 	bl	8004b1c <__sfp>
 8004adc:	6060      	str	r0, [r4, #4]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f81c 	bl	8004b1c <__sfp>
 8004ae4:	60a0      	str	r0, [r4, #8]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f818 	bl	8004b1c <__sfp>
 8004aec:	2200      	movs	r2, #0
 8004aee:	60e0      	str	r0, [r4, #12]
 8004af0:	2104      	movs	r1, #4
 8004af2:	6860      	ldr	r0, [r4, #4]
 8004af4:	f7ff ff82 	bl	80049fc <std>
 8004af8:	68a0      	ldr	r0, [r4, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	f7ff ff7d 	bl	80049fc <std>
 8004b02:	68e0      	ldr	r0, [r4, #12]
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	f7ff ff78 	bl	80049fc <std>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61a3      	str	r3, [r4, #24]
 8004b10:	e7d2      	b.n	8004ab8 <__sinit+0xc>
 8004b12:	bf00      	nop
 8004b14:	08005430 	.word	0x08005430
 8004b18:	08004a45 	.word	0x08004a45

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4607      	mov	r7, r0
 8004b20:	f7ff ffac 	bl	8004a7c <__sfp_lock_acquire>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <__sfp+0x84>)
 8004b26:	681e      	ldr	r6, [r3, #0]
 8004b28:	69b3      	ldr	r3, [r6, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__sfp+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffbd 	bl	8004aac <__sinit>
 8004b32:	3648      	adds	r6, #72	; 0x48
 8004b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	d503      	bpl.n	8004b44 <__sfp+0x28>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	b30b      	cbz	r3, 8004b84 <__sfp+0x68>
 8004b40:	6836      	ldr	r6, [r6, #0]
 8004b42:	e7f7      	b.n	8004b34 <__sfp+0x18>
 8004b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b48:	b9d5      	cbnz	r5, 8004b80 <__sfp+0x64>
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <__sfp+0x88>)
 8004b4c:	60e3      	str	r3, [r4, #12]
 8004b4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b52:	6665      	str	r5, [r4, #100]	; 0x64
 8004b54:	f7ff fccc 	bl	80044f0 <__retarget_lock_init_recursive>
 8004b58:	f7ff ff96 	bl	8004a88 <__sfp_lock_release>
 8004b5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b64:	6025      	str	r5, [r4, #0]
 8004b66:	61a5      	str	r5, [r4, #24]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b70:	f7ff fcc1 	bl	80044f6 <memset>
 8004b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	3468      	adds	r4, #104	; 0x68
 8004b82:	e7d9      	b.n	8004b38 <__sfp+0x1c>
 8004b84:	2104      	movs	r1, #4
 8004b86:	4638      	mov	r0, r7
 8004b88:	f7ff ff62 	bl	8004a50 <__sfmoreglue>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1d5      	bne.n	8004b40 <__sfp+0x24>
 8004b94:	f7ff ff78 	bl	8004a88 <__sfp_lock_release>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__sfp+0x60>
 8004b9e:	bf00      	nop
 8004ba0:	08005430 	.word	0x08005430
 8004ba4:	ffff0001 	.word	0xffff0001

08004ba8 <_fwalk_reent>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4606      	mov	r6, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb4:	2700      	movs	r7, #0
 8004bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bba:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbe:	d505      	bpl.n	8004bcc <_fwalk_reent+0x24>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	2c00      	cmp	r4, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <_fwalk_reent+0xe>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d907      	bls.n	8004be2 <_fwalk_reent+0x3a>
 8004bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <_fwalk_reent+0x3a>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	47c0      	blx	r8
 8004be0:	4307      	orrs	r7, r0
 8004be2:	3568      	adds	r5, #104	; 0x68
 8004be4:	e7e9      	b.n	8004bba <_fwalk_reent+0x12>

08004be6 <__swhatbuf_r>:
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	460e      	mov	r6, r1
 8004bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	b096      	sub	sp, #88	; 0x58
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	da08      	bge.n	8004c0a <__swhatbuf_r+0x24>
 8004bf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	602a      	str	r2, [r5, #0]
 8004c00:	061a      	lsls	r2, r3, #24
 8004c02:	d410      	bmi.n	8004c26 <__swhatbuf_r+0x40>
 8004c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c08:	e00e      	b.n	8004c28 <__swhatbuf_r+0x42>
 8004c0a:	466a      	mov	r2, sp
 8004c0c:	f000 f9a4 	bl	8004f58 <_fstat_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	dbf1      	blt.n	8004bf8 <__swhatbuf_r+0x12>
 8004c14:	9a01      	ldr	r2, [sp, #4]
 8004c16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c1e:	425a      	negs	r2, r3
 8004c20:	415a      	adcs	r2, r3
 8004c22:	602a      	str	r2, [r5, #0]
 8004c24:	e7ee      	b.n	8004c04 <__swhatbuf_r+0x1e>
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	2000      	movs	r0, #0
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	b016      	add	sp, #88	; 0x58
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}

08004c30 <__smakebuf_r>:
 8004c30:	898b      	ldrh	r3, [r1, #12]
 8004c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c34:	079d      	lsls	r5, r3, #30
 8004c36:	4606      	mov	r6, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	d507      	bpl.n	8004c4c <__smakebuf_r+0x1c>
 8004c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	6123      	str	r3, [r4, #16]
 8004c44:	2301      	movs	r3, #1
 8004c46:	6163      	str	r3, [r4, #20]
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	ab01      	add	r3, sp, #4
 8004c4e:	466a      	mov	r2, sp
 8004c50:	f7ff ffc9 	bl	8004be6 <__swhatbuf_r>
 8004c54:	9900      	ldr	r1, [sp, #0]
 8004c56:	4605      	mov	r5, r0
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 f893 	bl	8004d84 <_malloc_r>
 8004c5e:	b948      	cbnz	r0, 8004c74 <__smakebuf_r+0x44>
 8004c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c64:	059a      	lsls	r2, r3, #22
 8004c66:	d4ef      	bmi.n	8004c48 <__smakebuf_r+0x18>
 8004c68:	f023 0303 	bic.w	r3, r3, #3
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e7e3      	b.n	8004c3c <__smakebuf_r+0xc>
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <__smakebuf_r+0x7c>)
 8004c76:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	6020      	str	r0, [r4, #0]
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	9b00      	ldr	r3, [sp, #0]
 8004c84:	6163      	str	r3, [r4, #20]
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	6120      	str	r0, [r4, #16]
 8004c8a:	b15b      	cbz	r3, 8004ca4 <__smakebuf_r+0x74>
 8004c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 f973 	bl	8004f7c <_isatty_r>
 8004c96:	b128      	cbz	r0, 8004ca4 <__smakebuf_r+0x74>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	89a0      	ldrh	r0, [r4, #12]
 8004ca6:	4305      	orrs	r5, r0
 8004ca8:	81a5      	strh	r5, [r4, #12]
 8004caa:	e7cd      	b.n	8004c48 <__smakebuf_r+0x18>
 8004cac:	08004a45 	.word	0x08004a45

08004cb0 <_free_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d041      	beq.n	8004d3c <_free_r+0x8c>
 8004cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cbc:	1f0c      	subs	r4, r1, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	18e4      	addlt	r4, r4, r3
 8004cc4:	f000 f97c 	bl	8004fc0 <__malloc_lock>
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <_free_r+0x90>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	b933      	cbnz	r3, 8004cdc <_free_r+0x2c>
 8004cce:	6063      	str	r3, [r4, #4]
 8004cd0:	6014      	str	r4, [r2, #0]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd8:	f000 b978 	b.w	8004fcc <__malloc_unlock>
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	d908      	bls.n	8004cf2 <_free_r+0x42>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	1821      	adds	r1, r4, r0
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	bf01      	itttt	eq
 8004ce8:	6819      	ldreq	r1, [r3, #0]
 8004cea:	685b      	ldreq	r3, [r3, #4]
 8004cec:	1809      	addeq	r1, r1, r0
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	e7ed      	b.n	8004cce <_free_r+0x1e>
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b10b      	cbz	r3, 8004cfc <_free_r+0x4c>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d9fa      	bls.n	8004cf2 <_free_r+0x42>
 8004cfc:	6811      	ldr	r1, [r2, #0]
 8004cfe:	1850      	adds	r0, r2, r1
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d10b      	bne.n	8004d1c <_free_r+0x6c>
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	4401      	add	r1, r0
 8004d08:	1850      	adds	r0, r2, r1
 8004d0a:	4283      	cmp	r3, r0
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	d1e0      	bne.n	8004cd2 <_free_r+0x22>
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	6053      	str	r3, [r2, #4]
 8004d16:	4401      	add	r1, r0
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	e7da      	b.n	8004cd2 <_free_r+0x22>
 8004d1c:	d902      	bls.n	8004d24 <_free_r+0x74>
 8004d1e:	230c      	movs	r3, #12
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	e7d6      	b.n	8004cd2 <_free_r+0x22>
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	1821      	adds	r1, r4, r0
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bf04      	itt	eq
 8004d2c:	6819      	ldreq	r1, [r3, #0]
 8004d2e:	685b      	ldreq	r3, [r3, #4]
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	bf04      	itt	eq
 8004d34:	1809      	addeq	r1, r1, r0
 8004d36:	6021      	streq	r1, [r4, #0]
 8004d38:	6054      	str	r4, [r2, #4]
 8004d3a:	e7ca      	b.n	8004cd2 <_free_r+0x22>
 8004d3c:	bd38      	pop	{r3, r4, r5, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000244 	.word	0x20000244

08004d44 <sbrk_aligned>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4e0e      	ldr	r6, [pc, #56]	; (8004d80 <sbrk_aligned+0x3c>)
 8004d48:	460c      	mov	r4, r1
 8004d4a:	6831      	ldr	r1, [r6, #0]
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	b911      	cbnz	r1, 8004d56 <sbrk_aligned+0x12>
 8004d50:	f000 f88c 	bl	8004e6c <_sbrk_r>
 8004d54:	6030      	str	r0, [r6, #0]
 8004d56:	4621      	mov	r1, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 f887 	bl	8004e6c <_sbrk_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d00a      	beq.n	8004d78 <sbrk_aligned+0x34>
 8004d62:	1cc4      	adds	r4, r0, #3
 8004d64:	f024 0403 	bic.w	r4, r4, #3
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d007      	beq.n	8004d7c <sbrk_aligned+0x38>
 8004d6c:	1a21      	subs	r1, r4, r0
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f87c 	bl	8004e6c <_sbrk_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d101      	bne.n	8004d7c <sbrk_aligned+0x38>
 8004d78:	f04f 34ff 	mov.w	r4, #4294967295
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	20000248 	.word	0x20000248

08004d84 <_malloc_r>:
 8004d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d88:	1ccd      	adds	r5, r1, #3
 8004d8a:	f025 0503 	bic.w	r5, r5, #3
 8004d8e:	3508      	adds	r5, #8
 8004d90:	2d0c      	cmp	r5, #12
 8004d92:	bf38      	it	cc
 8004d94:	250c      	movcc	r5, #12
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	4607      	mov	r7, r0
 8004d9a:	db01      	blt.n	8004da0 <_malloc_r+0x1c>
 8004d9c:	42a9      	cmp	r1, r5
 8004d9e:	d905      	bls.n	8004dac <_malloc_r+0x28>
 8004da0:	230c      	movs	r3, #12
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	2600      	movs	r6, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dac:	4e2e      	ldr	r6, [pc, #184]	; (8004e68 <_malloc_r+0xe4>)
 8004dae:	f000 f907 	bl	8004fc0 <__malloc_lock>
 8004db2:	6833      	ldr	r3, [r6, #0]
 8004db4:	461c      	mov	r4, r3
 8004db6:	bb34      	cbnz	r4, 8004e06 <_malloc_r+0x82>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f7ff ffc2 	bl	8004d44 <sbrk_aligned>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	d14d      	bne.n	8004e62 <_malloc_r+0xde>
 8004dc6:	6834      	ldr	r4, [r6, #0]
 8004dc8:	4626      	mov	r6, r4
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d140      	bne.n	8004e50 <_malloc_r+0xcc>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	eb04 0803 	add.w	r8, r4, r3
 8004dd8:	f000 f848 	bl	8004e6c <_sbrk_r>
 8004ddc:	4580      	cmp	r8, r0
 8004dde:	d13a      	bne.n	8004e56 <_malloc_r+0xd2>
 8004de0:	6821      	ldr	r1, [r4, #0]
 8004de2:	3503      	adds	r5, #3
 8004de4:	1a6d      	subs	r5, r5, r1
 8004de6:	f025 0503 	bic.w	r5, r5, #3
 8004dea:	3508      	adds	r5, #8
 8004dec:	2d0c      	cmp	r5, #12
 8004dee:	bf38      	it	cc
 8004df0:	250c      	movcc	r5, #12
 8004df2:	4629      	mov	r1, r5
 8004df4:	4638      	mov	r0, r7
 8004df6:	f7ff ffa5 	bl	8004d44 <sbrk_aligned>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d02b      	beq.n	8004e56 <_malloc_r+0xd2>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	442b      	add	r3, r5
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	e00e      	b.n	8004e24 <_malloc_r+0xa0>
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	1b52      	subs	r2, r2, r5
 8004e0a:	d41e      	bmi.n	8004e4a <_malloc_r+0xc6>
 8004e0c:	2a0b      	cmp	r2, #11
 8004e0e:	d916      	bls.n	8004e3e <_malloc_r+0xba>
 8004e10:	1961      	adds	r1, r4, r5
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	6025      	str	r5, [r4, #0]
 8004e16:	bf18      	it	ne
 8004e18:	6059      	strne	r1, [r3, #4]
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	bf08      	it	eq
 8004e1e:	6031      	streq	r1, [r6, #0]
 8004e20:	5162      	str	r2, [r4, r5]
 8004e22:	604b      	str	r3, [r1, #4]
 8004e24:	4638      	mov	r0, r7
 8004e26:	f104 060b 	add.w	r6, r4, #11
 8004e2a:	f000 f8cf 	bl	8004fcc <__malloc_unlock>
 8004e2e:	f026 0607 	bic.w	r6, r6, #7
 8004e32:	1d23      	adds	r3, r4, #4
 8004e34:	1af2      	subs	r2, r6, r3
 8004e36:	d0b6      	beq.n	8004da6 <_malloc_r+0x22>
 8004e38:	1b9b      	subs	r3, r3, r6
 8004e3a:	50a3      	str	r3, [r4, r2]
 8004e3c:	e7b3      	b.n	8004da6 <_malloc_r+0x22>
 8004e3e:	6862      	ldr	r2, [r4, #4]
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	bf0c      	ite	eq
 8004e44:	6032      	streq	r2, [r6, #0]
 8004e46:	605a      	strne	r2, [r3, #4]
 8004e48:	e7ec      	b.n	8004e24 <_malloc_r+0xa0>
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	6864      	ldr	r4, [r4, #4]
 8004e4e:	e7b2      	b.n	8004db6 <_malloc_r+0x32>
 8004e50:	4634      	mov	r4, r6
 8004e52:	6876      	ldr	r6, [r6, #4]
 8004e54:	e7b9      	b.n	8004dca <_malloc_r+0x46>
 8004e56:	230c      	movs	r3, #12
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f000 f8b6 	bl	8004fcc <__malloc_unlock>
 8004e60:	e7a1      	b.n	8004da6 <_malloc_r+0x22>
 8004e62:	6025      	str	r5, [r4, #0]
 8004e64:	e7de      	b.n	8004e24 <_malloc_r+0xa0>
 8004e66:	bf00      	nop
 8004e68:	20000244 	.word	0x20000244

08004e6c <_sbrk_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d06      	ldr	r5, [pc, #24]	; (8004e88 <_sbrk_r+0x1c>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	602b      	str	r3, [r5, #0]
 8004e78:	f7fb fe38 	bl	8000aec <_sbrk>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_sbrk_r+0x1a>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_sbrk_r+0x1a>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	2000024c 	.word	0x2000024c

08004e8c <__sread>:
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	460c      	mov	r4, r1
 8004e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e94:	f000 f8a0 	bl	8004fd8 <_read_r>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	bfab      	itete	ge
 8004e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004ea0:	181b      	addge	r3, r3, r0
 8004ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ea6:	bfac      	ite	ge
 8004ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eaa:	81a3      	strhlt	r3, [r4, #12]
 8004eac:	bd10      	pop	{r4, pc}

08004eae <__swrite>:
 8004eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb2:	461f      	mov	r7, r3
 8004eb4:	898b      	ldrh	r3, [r1, #12]
 8004eb6:	05db      	lsls	r3, r3, #23
 8004eb8:	4605      	mov	r5, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	d505      	bpl.n	8004ecc <__swrite+0x1e>
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f000 f868 	bl	8004f9c <_lseek_r>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	4632      	mov	r2, r6
 8004eda:	463b      	mov	r3, r7
 8004edc:	4628      	mov	r0, r5
 8004ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	f000 b817 	b.w	8004f14 <_write_r>

08004ee6 <__sseek>:
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	460c      	mov	r4, r1
 8004eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eee:	f000 f855 	bl	8004f9c <_lseek_r>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	bf15      	itete	ne
 8004ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f02:	81a3      	strheq	r3, [r4, #12]
 8004f04:	bf18      	it	ne
 8004f06:	81a3      	strhne	r3, [r4, #12]
 8004f08:	bd10      	pop	{r4, pc}

08004f0a <__sclose>:
 8004f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0e:	f000 b813 	b.w	8004f38 <_close_r>
	...

08004f14 <_write_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d07      	ldr	r5, [pc, #28]	; (8004f34 <_write_r+0x20>)
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fb fd95 	bl	8000a52 <_write>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_write_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_write_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	2000024c 	.word	0x2000024c

08004f38 <_close_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d06      	ldr	r5, [pc, #24]	; (8004f54 <_close_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fb fda1 	bl	8000a8a <_close>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_close_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_close_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	2000024c 	.word	0x2000024c

08004f58 <_fstat_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	; (8004f78 <_fstat_r+0x20>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	f7fb fd9b 	bl	8000aa0 <_fstat>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d102      	bne.n	8004f74 <_fstat_r+0x1c>
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	b103      	cbz	r3, 8004f74 <_fstat_r+0x1c>
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	bf00      	nop
 8004f78:	2000024c 	.word	0x2000024c

08004f7c <_isatty_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d06      	ldr	r5, [pc, #24]	; (8004f98 <_isatty_r+0x1c>)
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	f7fb fd99 	bl	8000abe <_isatty>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_isatty_r+0x1a>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_isatty_r+0x1a>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	2000024c 	.word	0x2000024c

08004f9c <_lseek_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d07      	ldr	r5, [pc, #28]	; (8004fbc <_lseek_r+0x20>)
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	602a      	str	r2, [r5, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fb fd91 	bl	8000ad2 <_lseek>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_lseek_r+0x1e>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_lseek_r+0x1e>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	2000024c 	.word	0x2000024c

08004fc0 <__malloc_lock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_lock+0x8>)
 8004fc2:	f7ff ba96 	b.w	80044f2 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000240 	.word	0x20000240

08004fcc <__malloc_unlock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__malloc_unlock+0x8>)
 8004fce:	f7ff ba91 	b.w	80044f4 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000240 	.word	0x20000240

08004fd8 <_read_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d07      	ldr	r5, [pc, #28]	; (8004ff8 <_read_r+0x20>)
 8004fdc:	4604      	mov	r4, r0
 8004fde:	4608      	mov	r0, r1
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fb fd16 	bl	8000a18 <_read>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_read_r+0x1e>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_read_r+0x1e>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	2000024c 	.word	0x2000024c

08004ffc <__udivmoddi4>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	9e08      	ldr	r6, [sp, #32]
 8005002:	460d      	mov	r5, r1
 8005004:	4604      	mov	r4, r0
 8005006:	4688      	mov	r8, r1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d14d      	bne.n	80050a8 <__udivmoddi4+0xac>
 800500c:	428a      	cmp	r2, r1
 800500e:	4694      	mov	ip, r2
 8005010:	d968      	bls.n	80050e4 <__udivmoddi4+0xe8>
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b152      	cbz	r2, 800502e <__udivmoddi4+0x32>
 8005018:	fa01 f302 	lsl.w	r3, r1, r2
 800501c:	f1c2 0120 	rsb	r1, r2, #32
 8005020:	fa20 f101 	lsr.w	r1, r0, r1
 8005024:	fa0c fc02 	lsl.w	ip, ip, r2
 8005028:	ea41 0803 	orr.w	r8, r1, r3
 800502c:	4094      	lsls	r4, r2
 800502e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8005032:	0c21      	lsrs	r1, r4, #16
 8005034:	fbb8 fef5 	udiv	lr, r8, r5
 8005038:	fa1f f78c 	uxth.w	r7, ip
 800503c:	fb05 831e 	mls	r3, r5, lr, r8
 8005040:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005044:	fb0e f107 	mul.w	r1, lr, r7
 8005048:	4299      	cmp	r1, r3
 800504a:	d90b      	bls.n	8005064 <__udivmoddi4+0x68>
 800504c:	eb1c 0303 	adds.w	r3, ip, r3
 8005050:	f10e 30ff 	add.w	r0, lr, #4294967295
 8005054:	f080 811e 	bcs.w	8005294 <__udivmoddi4+0x298>
 8005058:	4299      	cmp	r1, r3
 800505a:	f240 811b 	bls.w	8005294 <__udivmoddi4+0x298>
 800505e:	f1ae 0e02 	sub.w	lr, lr, #2
 8005062:	4463      	add	r3, ip
 8005064:	1a5b      	subs	r3, r3, r1
 8005066:	b2a4      	uxth	r4, r4
 8005068:	fbb3 f0f5 	udiv	r0, r3, r5
 800506c:	fb05 3310 	mls	r3, r5, r0, r3
 8005070:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005074:	fb00 f707 	mul.w	r7, r0, r7
 8005078:	42a7      	cmp	r7, r4
 800507a:	d90a      	bls.n	8005092 <__udivmoddi4+0x96>
 800507c:	eb1c 0404 	adds.w	r4, ip, r4
 8005080:	f100 33ff 	add.w	r3, r0, #4294967295
 8005084:	f080 8108 	bcs.w	8005298 <__udivmoddi4+0x29c>
 8005088:	42a7      	cmp	r7, r4
 800508a:	f240 8105 	bls.w	8005298 <__udivmoddi4+0x29c>
 800508e:	4464      	add	r4, ip
 8005090:	3802      	subs	r0, #2
 8005092:	1be4      	subs	r4, r4, r7
 8005094:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8005098:	2100      	movs	r1, #0
 800509a:	b11e      	cbz	r6, 80050a4 <__udivmoddi4+0xa8>
 800509c:	40d4      	lsrs	r4, r2
 800509e:	2300      	movs	r3, #0
 80050a0:	e9c6 4300 	strd	r4, r3, [r6]
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	428b      	cmp	r3, r1
 80050aa:	d908      	bls.n	80050be <__udivmoddi4+0xc2>
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	f000 80ee 	beq.w	800528e <__udivmoddi4+0x292>
 80050b2:	2100      	movs	r1, #0
 80050b4:	e9c6 0500 	strd	r0, r5, [r6]
 80050b8:	4608      	mov	r0, r1
 80050ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050be:	fab3 f183 	clz	r1, r3
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d14a      	bne.n	800515c <__udivmoddi4+0x160>
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	d302      	bcc.n	80050d0 <__udivmoddi4+0xd4>
 80050ca:	4282      	cmp	r2, r0
 80050cc:	f200 80f9 	bhi.w	80052c2 <__udivmoddi4+0x2c6>
 80050d0:	1a84      	subs	r4, r0, r2
 80050d2:	eb65 0303 	sbc.w	r3, r5, r3
 80050d6:	2001      	movs	r0, #1
 80050d8:	4698      	mov	r8, r3
 80050da:	2e00      	cmp	r6, #0
 80050dc:	d0e2      	beq.n	80050a4 <__udivmoddi4+0xa8>
 80050de:	e9c6 4800 	strd	r4, r8, [r6]
 80050e2:	e7df      	b.n	80050a4 <__udivmoddi4+0xa8>
 80050e4:	b902      	cbnz	r2, 80050e8 <__udivmoddi4+0xec>
 80050e6:	deff      	udf	#255	; 0xff
 80050e8:	fab2 f282 	clz	r2, r2
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	f040 8091 	bne.w	8005214 <__udivmoddi4+0x218>
 80050f2:	eba1 050c 	sub.w	r5, r1, ip
 80050f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80050fa:	fa1f fe8c 	uxth.w	lr, ip
 80050fe:	2101      	movs	r1, #1
 8005100:	fbb5 f3f7 	udiv	r3, r5, r7
 8005104:	fb07 5013 	mls	r0, r7, r3, r5
 8005108:	0c25      	lsrs	r5, r4, #16
 800510a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800510e:	fb0e f003 	mul.w	r0, lr, r3
 8005112:	42a8      	cmp	r0, r5
 8005114:	d908      	bls.n	8005128 <__udivmoddi4+0x12c>
 8005116:	eb1c 0505 	adds.w	r5, ip, r5
 800511a:	f103 38ff 	add.w	r8, r3, #4294967295
 800511e:	d202      	bcs.n	8005126 <__udivmoddi4+0x12a>
 8005120:	42a8      	cmp	r0, r5
 8005122:	f200 80cb 	bhi.w	80052bc <__udivmoddi4+0x2c0>
 8005126:	4643      	mov	r3, r8
 8005128:	1a2d      	subs	r5, r5, r0
 800512a:	b2a4      	uxth	r4, r4
 800512c:	fbb5 f0f7 	udiv	r0, r5, r7
 8005130:	fb07 5510 	mls	r5, r7, r0, r5
 8005134:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005138:	fb0e fe00 	mul.w	lr, lr, r0
 800513c:	45a6      	cmp	lr, r4
 800513e:	d908      	bls.n	8005152 <__udivmoddi4+0x156>
 8005140:	eb1c 0404 	adds.w	r4, ip, r4
 8005144:	f100 35ff 	add.w	r5, r0, #4294967295
 8005148:	d202      	bcs.n	8005150 <__udivmoddi4+0x154>
 800514a:	45a6      	cmp	lr, r4
 800514c:	f200 80bb 	bhi.w	80052c6 <__udivmoddi4+0x2ca>
 8005150:	4628      	mov	r0, r5
 8005152:	eba4 040e 	sub.w	r4, r4, lr
 8005156:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800515a:	e79e      	b.n	800509a <__udivmoddi4+0x9e>
 800515c:	f1c1 0720 	rsb	r7, r1, #32
 8005160:	408b      	lsls	r3, r1
 8005162:	fa22 fc07 	lsr.w	ip, r2, r7
 8005166:	ea4c 0c03 	orr.w	ip, ip, r3
 800516a:	fa20 f407 	lsr.w	r4, r0, r7
 800516e:	fa05 f301 	lsl.w	r3, r5, r1
 8005172:	431c      	orrs	r4, r3
 8005174:	40fd      	lsrs	r5, r7
 8005176:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800517a:	fa00 f301 	lsl.w	r3, r0, r1
 800517e:	fbb5 f8f9 	udiv	r8, r5, r9
 8005182:	0c20      	lsrs	r0, r4, #16
 8005184:	fa1f fe8c 	uxth.w	lr, ip
 8005188:	fb09 5518 	mls	r5, r9, r8, r5
 800518c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8005190:	fb08 f00e 	mul.w	r0, r8, lr
 8005194:	42a8      	cmp	r0, r5
 8005196:	fa02 f201 	lsl.w	r2, r2, r1
 800519a:	d90b      	bls.n	80051b4 <__udivmoddi4+0x1b8>
 800519c:	eb1c 0505 	adds.w	r5, ip, r5
 80051a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80051a4:	f080 8088 	bcs.w	80052b8 <__udivmoddi4+0x2bc>
 80051a8:	42a8      	cmp	r0, r5
 80051aa:	f240 8085 	bls.w	80052b8 <__udivmoddi4+0x2bc>
 80051ae:	f1a8 0802 	sub.w	r8, r8, #2
 80051b2:	4465      	add	r5, ip
 80051b4:	1a2d      	subs	r5, r5, r0
 80051b6:	b2a4      	uxth	r4, r4
 80051b8:	fbb5 f0f9 	udiv	r0, r5, r9
 80051bc:	fb09 5510 	mls	r5, r9, r0, r5
 80051c0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80051c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80051c8:	45ae      	cmp	lr, r5
 80051ca:	d908      	bls.n	80051de <__udivmoddi4+0x1e2>
 80051cc:	eb1c 0505 	adds.w	r5, ip, r5
 80051d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80051d4:	d26c      	bcs.n	80052b0 <__udivmoddi4+0x2b4>
 80051d6:	45ae      	cmp	lr, r5
 80051d8:	d96a      	bls.n	80052b0 <__udivmoddi4+0x2b4>
 80051da:	3802      	subs	r0, #2
 80051dc:	4465      	add	r5, ip
 80051de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80051e2:	fba0 9402 	umull	r9, r4, r0, r2
 80051e6:	eba5 050e 	sub.w	r5, r5, lr
 80051ea:	42a5      	cmp	r5, r4
 80051ec:	46c8      	mov	r8, r9
 80051ee:	46a6      	mov	lr, r4
 80051f0:	d356      	bcc.n	80052a0 <__udivmoddi4+0x2a4>
 80051f2:	d053      	beq.n	800529c <__udivmoddi4+0x2a0>
 80051f4:	b15e      	cbz	r6, 800520e <__udivmoddi4+0x212>
 80051f6:	ebb3 0208 	subs.w	r2, r3, r8
 80051fa:	eb65 050e 	sbc.w	r5, r5, lr
 80051fe:	fa05 f707 	lsl.w	r7, r5, r7
 8005202:	fa22 f301 	lsr.w	r3, r2, r1
 8005206:	40cd      	lsrs	r5, r1
 8005208:	431f      	orrs	r7, r3
 800520a:	e9c6 7500 	strd	r7, r5, [r6]
 800520e:	2100      	movs	r1, #0
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	f1c2 0320 	rsb	r3, r2, #32
 8005218:	fa20 f103 	lsr.w	r1, r0, r3
 800521c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005220:	fa25 f303 	lsr.w	r3, r5, r3
 8005224:	4095      	lsls	r5, r2
 8005226:	430d      	orrs	r5, r1
 8005228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800522c:	fa1f fe8c 	uxth.w	lr, ip
 8005230:	fbb3 f1f7 	udiv	r1, r3, r7
 8005234:	fb07 3011 	mls	r0, r7, r1, r3
 8005238:	0c2b      	lsrs	r3, r5, #16
 800523a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800523e:	fb01 f00e 	mul.w	r0, r1, lr
 8005242:	4298      	cmp	r0, r3
 8005244:	fa04 f402 	lsl.w	r4, r4, r2
 8005248:	d908      	bls.n	800525c <__udivmoddi4+0x260>
 800524a:	eb1c 0303 	adds.w	r3, ip, r3
 800524e:	f101 38ff 	add.w	r8, r1, #4294967295
 8005252:	d22f      	bcs.n	80052b4 <__udivmoddi4+0x2b8>
 8005254:	4298      	cmp	r0, r3
 8005256:	d92d      	bls.n	80052b4 <__udivmoddi4+0x2b8>
 8005258:	3902      	subs	r1, #2
 800525a:	4463      	add	r3, ip
 800525c:	1a1b      	subs	r3, r3, r0
 800525e:	b2ad      	uxth	r5, r5
 8005260:	fbb3 f0f7 	udiv	r0, r3, r7
 8005264:	fb07 3310 	mls	r3, r7, r0, r3
 8005268:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800526c:	fb00 f30e 	mul.w	r3, r0, lr
 8005270:	42ab      	cmp	r3, r5
 8005272:	d908      	bls.n	8005286 <__udivmoddi4+0x28a>
 8005274:	eb1c 0505 	adds.w	r5, ip, r5
 8005278:	f100 38ff 	add.w	r8, r0, #4294967295
 800527c:	d216      	bcs.n	80052ac <__udivmoddi4+0x2b0>
 800527e:	42ab      	cmp	r3, r5
 8005280:	d914      	bls.n	80052ac <__udivmoddi4+0x2b0>
 8005282:	3802      	subs	r0, #2
 8005284:	4465      	add	r5, ip
 8005286:	1aed      	subs	r5, r5, r3
 8005288:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800528c:	e738      	b.n	8005100 <__udivmoddi4+0x104>
 800528e:	4631      	mov	r1, r6
 8005290:	4630      	mov	r0, r6
 8005292:	e707      	b.n	80050a4 <__udivmoddi4+0xa8>
 8005294:	4686      	mov	lr, r0
 8005296:	e6e5      	b.n	8005064 <__udivmoddi4+0x68>
 8005298:	4618      	mov	r0, r3
 800529a:	e6fa      	b.n	8005092 <__udivmoddi4+0x96>
 800529c:	454b      	cmp	r3, r9
 800529e:	d2a9      	bcs.n	80051f4 <__udivmoddi4+0x1f8>
 80052a0:	ebb9 0802 	subs.w	r8, r9, r2
 80052a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80052a8:	3801      	subs	r0, #1
 80052aa:	e7a3      	b.n	80051f4 <__udivmoddi4+0x1f8>
 80052ac:	4640      	mov	r0, r8
 80052ae:	e7ea      	b.n	8005286 <__udivmoddi4+0x28a>
 80052b0:	4620      	mov	r0, r4
 80052b2:	e794      	b.n	80051de <__udivmoddi4+0x1e2>
 80052b4:	4641      	mov	r1, r8
 80052b6:	e7d1      	b.n	800525c <__udivmoddi4+0x260>
 80052b8:	46d0      	mov	r8, sl
 80052ba:	e77b      	b.n	80051b4 <__udivmoddi4+0x1b8>
 80052bc:	3b02      	subs	r3, #2
 80052be:	4465      	add	r5, ip
 80052c0:	e732      	b.n	8005128 <__udivmoddi4+0x12c>
 80052c2:	4608      	mov	r0, r1
 80052c4:	e709      	b.n	80050da <__udivmoddi4+0xde>
 80052c6:	4464      	add	r4, ip
 80052c8:	3802      	subs	r0, #2
 80052ca:	e742      	b.n	8005152 <__udivmoddi4+0x156>

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr

Disassembly of section .after_vectors:

080052e4 <FMC_IRQHandler>:
// When in DEBUG, trigger a debug exception to clearly notify
// the user of the exception and help identify the cause.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
#if defined(DEBUG)
__DEBUG_BKPT();
 80052e8:	be00      	bkpt	0x0000
#endif
while (1)
 80052ea:	e7fe      	b.n	80052ea <FMC_IRQHandler+0x6>

080052ec <Reset_Handler>:

// The DEBUG version is not naked, but has a proper stack frame,
// to allow setting breakpoints at Reset_Handler.
void __attribute__ ((section(".after_vectors"),noreturn))
Reset_Handler (void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  _start ();
 80052f0:	f7fb f812 	bl	8000318 <_mainCRTStartup>

#endif

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 80052f8:	be00      	bkpt	0x0000
#endif
  while (1)
 80052fa:	e7fe      	b.n	80052fa <Reset_Handler+0xe>
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 80052fc:	f01e 0f04 	tst.w	lr, #4
 8005300:	bf0c      	ite	eq
 8005302:	f3ef 8008 	mrseq	r0, MSP
 8005306:	f3ef 8009 	mrsne	r0, PSP
 800530a:	4671      	mov	r1, lr
 800530c:	4a21      	ldr	r2, [pc, #132]	; (8005394 <UsageFault_Handler_C+0x32>)
 800530e:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 8005310:	bf00      	nop

08005312 <HardFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  trace_printf ("[HardFault]\n");
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 800531c:	be00      	bkpt	0x0000
#endif
  while (1)
 800531e:	e7fe      	b.n	800531e <HardFault_Handler_C+0xc>

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8005324:	be00      	bkpt	0x0000
#endif
  while (1)
 8005326:	e7fe      	b.n	8005326 <HardFault_Handler_C+0x14>
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 8005328:	f01e 0f04 	tst.w	lr, #4
 800532c:	bf0c      	ite	eq
 800532e:	f3ef 8008 	mrseq	r0, MSP
 8005332:	f3ef 8009 	mrsne	r0, PSP
 8005336:	4671      	mov	r1, lr
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <UsageFault_Handler_C+0x36>)
 800533a:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 800533c:	bf00      	nop

0800533e <BusFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  trace_printf ("[BusFault]\n");
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8005348:	be00      	bkpt	0x0000
#endif
  while (1)
 800534a:	e7fe      	b.n	800534a <BusFault_Handler_C+0xc>
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 800534c:	f01e 0f04 	tst.w	lr, #4
 8005350:	bf0c      	ite	eq
 8005352:	f3ef 8008 	mrseq	r0, MSP
 8005356:	f3ef 8009 	mrsne	r0, PSP
 800535a:	4671      	mov	r1, lr
 800535c:	4a0f      	ldr	r2, [pc, #60]	; (800539c <UsageFault_Handler_C+0x3a>)
 800535e:	4710      	bx	r2

      : /* Outputs */
      : /* Inputs */
      : /* Clobbers */
  );
}
 8005360:	bf00      	nop

08005362 <UsageFault_Handler_C>:

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  trace_printf ("[UsageFault]\n");
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 800536c:	be00      	bkpt	0x0000
#endif
  while (1)
 800536e:	e7fe      	b.n	800536e <UsageFault_Handler_C+0xc>

#endif

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8005374:	be00      	bkpt	0x0000
#endif
  while (1)
 8005376:	e7fe      	b.n	8005376 <UsageFault_Handler_C+0x14>

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 800537c:	be00      	bkpt	0x0000
#endif
  while (1)
 800537e:	e7fe      	b.n	800537e <UsageFault_Handler_C+0x1c>

#endif

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
#if defined(DEBUG)
  __DEBUG_BKPT();
 8005384:	be00      	bkpt	0x0000
#endif
  while (1)
 8005386:	e7fe      	b.n	8005386 <UsageFault_Handler_C+0x24>
    }
}

void __attribute__ ((section(".after_vectors"),weak))
SysTick_Handler (void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  // DO NOT loop, just return.
  // Useful in case someone (like STM HAL) inadvertently enables SysTick.
  ;
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	08005313 	.word	0x08005313
 8005398:	0800533f 	.word	0x0800533f
 800539c:	08005363 	.word	0x08005363
